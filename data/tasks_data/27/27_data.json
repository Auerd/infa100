{"tasks":[{"id":"1","text":"Набор данных состоит из троек натуральных чисел. Необходимо распределить все числа на три группы, при этом в каждую группу должно попасть ровно одно число из каждой исходной тройки. Сумма всех чисел в первой группе должна быть чётной, во второй  — нечётной. Определите минимально возможную сумму всех чисел в третьей группе.\nВходные данные.\nФайл A\nФайл B\nПервая строка входного файла содержит число N  — общее количество троек в наборе. Каждая из следующих N строк содержит три натуральных числа, не превышающих 10 000.\nПример входного файла:\n3\n1 2 3\n8 12 4\n6 9 7\nДля указанных данных искомая сумма равна 11, она соответствует такому распределению чисел по группам: (2, 8, 7), (3, 12, 9), (1, 4, 6).\nВам даны два входных файла (A и B), каждый из которых имеет описанную выше структуру. В ответе укажите два числа: сначала значение искомой суммы для файла A, затем для файла B.\nПредупреждение: для обработки файла B не следует использовать переборный алгоритм, вычисляющий сумму для всех возможных вариантов, поскольку написанная по такому алгоритму программа будет выполняться слишком долго.","answer":"185 100918194","description":"Последовательно считывая данные из файла, будем прибавлять к первой сумме (переменная sumAns) минимальное число в тройке, к третьей сумме (переменная sum3) минимальное число в тройке, а ко второй сумме (переменная sum2) оставшееся число в тройке. Также в переменную minDif будем записывать значение минимальной нечётной разницы между между числами, накапливаемыми в первой сумме, и одним из чисел, накапливаемых в других суммах. Таким образом, если в переменных sum2 и sum3 по окончании работы программы одновременно будут два нечётных числа или два чётных числа, будем прибавлять к искомой сумме значение переменной minDif.","python":"f = open(\"27-B (1).txt\")\ns = f.readlines()\nn = int(s[0])\nsumAns = 0\nsum2 = 0\nsum3 = 0\nminDif = 20001\nfor i in range(1, n + 1):\n    x, y, z = map(int, s[i].split())\n    if (x <= y) and (x <= z):\n        sumAns = sumAns + x\n        if y <= z:\n            sum2 = sum2 + y\n            sum3 = sum3 + z\n        else:\n            sum3 = sum3 + y\n            sum2 = sum2 + z\n        if ((abs(x - y)) % 2 != 0) and (abs(x - y) < minDif): minDif = abs(x - y)\n        elif ((abs(x - z)) % 2 != 0) and (abs(x - z) < minDif): minDif = abs(x - z)\n    elif (y <= z) and (y <= x):\n        sumAns = sumAns + y\n        if x <= z:\n            sum2 = sum2 + x\n            sum3 = sum3 + z\n        else:\n            sum3 = sum3 + x\n            sum2 = sum2 + z\n        if ((abs(y - x)) % 2 != 0) and (abs(y - x) < minDif): minDif = abs(y - x)\n        elif ((abs(y - z)) % 2 != 0) and (abs(y - z) < minDif):  minDif = abs(y - z)\n    elif (z <= x) and (z <= y):\n         sumAns = sumAns + z\n         if x <= y:\n             sum2 = sum2 + x\n             sum3 = sum3 + y\n         else:\n             sum3 = sum3 + x\n             sum2 = sum2 + y\n         if ((abs(z - x)) % 2 != 0) and (abs(z - y) < minDif):\n            minDif = abs(z - x)\n         elif ((abs(z - y)) % 2 != 0) and (abs(z - x) < minDif):\n             minDif = abs(z - y)\nif (sum2 + sum3) % 2 != 0: print(sumAns)\nelse: print(sumAns + minDif)\n"},{"id":"2","text":"Имеется набор данных, состоящий из пар положительных целых чисел. Необходимо выбрать из каждой пары ровно одно число так, чтобы сумма всех выбранных чисел не делилась на 3 и при этом была минимально возможной. Гарантируется, что искомую сумму получить можно. Программа должна напечатать одно число  — минимально возможную сумму, соответствующую условиям задачи.\nВходные данные.\nФайл A\nФайл B\nДаны два входных файла (файл A и файл B), каждый из которых содержит в первой строке количество пар N (1 ≤ N ≤ 100000). Каждая из следующих N строк содержит два натуральных числа, не превышающих 10 000.\nПример организации исходных данных во входном файле:\n6\n1 3\n5 12\n6 9\n5 4\n3 3\n1 1\nДля указанных входных данных значением искомой суммы должно быть число 20.\nВ ответе укажите два числа: сначала значение искомой суммы для файла А, затем для файла B.\n \nПредупреждение: для обработки файла B не следует использовать переборный алгоритм, вычисляющий сумму для всех возможных вариантов, поскольку написанная по такому алгоритму программа будет выполняться слишком долго.","answer":"67088 200157478","description":"Последовательно считывая данные из файла, будем прибавлять к сумме минимальное число в паре. Также заметим, что в случае, если получившееся в результате суммирование минимальных чисел во всех парах число будет кратно трём, достаточно будет прибавить к этой сумме минимальную разницу между какими-либо двумя числами. Для этого при считывании пар помимо минимального числа в каждой паре будем искать минимальную разницу среди пар, не кратную трём.","python":"f = open('27-A_demo.txt')\nn = int(f.readline())\ns = 0\nminn = 20001\nd = 0\nfor i in range(n):\n    x, y = map(int, f.readline().split())\n    s += min(x, y)\n    d = abs(x-y)\n    if d % 3 != 0:\n        minn = min(d, minn)\nif s % 3 !=0:\n    print(s)\nelse:\n    print(s+minn)\nf.close()\n"},{"id":"3","text":"Дана последовательность целых чисел. Необходимо найти максимально возможную сумму её непрерывной подпоследовательности, в которой количество положительных чётных элементов кратно k  =  30.\nВходные данные.\nФайл A\nФайл B\nПервая строка входного файла содержит целое число N  — общее количество чисел в наборе. Каждая из следующих N строк содержит одно число. Гарантируется, что общая сумма любой выборки заданных чисел не превышает 2 · 109 по абсолютной величине.\nВам даны два входных файла (A и B), каждый из которых имеет описанную выше структуру. В ответе укажите два числа: сначала значение искомой суммы для файла A, затем для файла B.","answer":"97011 24932","description":"Для нахождения искомой суммы найдём сумму всех чисел в файле и, если количество чётных положительных чисел этой суммы не будет кратно 30, вычтем из этой суммы число, являющееся минимальной подсуммой чисел с таким же количеством чётных положительных чисел, кратных 30, как и у суммы всех чисел в файле.\nБудем последовательно считывать числа из файла. В массив lefts будем записывать первые встречающиеся суммы с количеством чётных элементов, делящимся на 30 с остатком от нуля до двадцати девяти. Каждое считанное число будем прибавлять к переменной sum. Если очередное встреченное число является чётным и положительным, будем увеличивать значение счётчика count. Каждую итерацию цикла будем проверять, больше ли текущая максимальная сумма в переменной maxsum больше значения выражения sum − lefts[d] (в этом выражении получаем значение новой подсуммы, с количеством чётных положительных чисел кратным 30). Если значение переменной maxsum меньше  — обновляем её значение.","python":"f = open(\"27-B.txt\")\nn = int(f.readline())\nlefts = [0 for i in range(30)]\nmaxsum = 0\nfor i in range(30):\n    lefts[i] = 2 * 1000000000\n    count = 0\n    sum = 0\nfor i in range(1, n + 1):\n    num = int(f.readline())\n    sum = sum + num\n    if (num % 2 == 0) and (num > 0):\n        count = count + 1\n    d = count % 30\n    if sum < lefts[d]:\n        lefts[d] = sum\n    maxsum = max(maxsum, sum - lefts[d])\nprint(maxsum)\n"},{"id":"4","text":"Дана последовательность из N натуральных чисел. Рассматриваются все её непрерывные подпоследовательности, такие что сумма элементов каждой из них кратна k  =  43. Найдите среди них подпоследовательность с максимальной суммой, определите её длину. Если таких подпоследовательностей найдено несколько, в ответе укажите количество элементов самой короткой из них.\nВходные данные\nФайл A\nФайл B\nДаны два входных файла (файл A и файл B), каждый из которых содержит в первой строке количество чисел N (1 ≤ N ≤ 10 000 000). Каждая из следующих N строк содержит одно натуральное число, не превышающее 10 000.\nПример организации исходных данных во входном файле:\n7\n1\n3\n4\n93\n8\n5\n95\nВ ответе укажите два числа: сначала значение искомой длины для файла А, затем  — для файла B.\nПредупреждение: для обработки файла B не следует использовать переборный алгоритм, вычисляющий сумму для всех возможных вариантов, поскольку написанная по такому алгоритму программа будет выполняться слишком долго.","answer":"185 329329","description":"Будем последовательно считывать числа из файла, суммируя все полученные числа. В массиве mins будем накапливать суммы с остатками от 0 до 42, в массиве minl будем накапливать длины для этих сумм. Каждую итерацию цикла будем проверять, делится ли текущая сумма на 43 без остатка. Если текущая сумма делится на 43 с определённым остатком, будем вычитать из неё сумму с таким же остатком из массива mins и записывать полученное значение в переменную maxsum (если полученная сумма будет больше текущего значения переменной), то же самое будем проделывать для минимальной длины последовательности.","python":"f = open(\"27_B.txt\")\nn = int(f.readline())\nmins = [1000000001 for i in range(43)]\nminl = [0 for i in range(43)]\nsum = 0\nmaxsum = 0\nminlen = 0\nms = 0\nl = 0\nfor i in range(1, n + 1):\n    num = int(f.readline())\n    sum = sum + num\n    d = sum % 43\n    if d == 0:\n        maxsum = sum\n        minlen = i\n    else:\n        ms = sum - mins[d]\n        l = i - minl[d]\n        if ms > maxsum:\n            maxsum = ms\n            minlen = l\n        if (ms == maxsum) and (l < minlen):\n            maxsum = ms\n            minlen = l\n        if sum < mins[d]:\n            mins[d] = sum\n            minl[d] = i\nprint(minlen)\n"},{"id":"5","text":"На каждом 3-м километре кольцевой автодороги с двусторонним движением установлены контейнеры для мусора. Длина кольцевой автодороги равна 3N километров. Нулевой километр и 3N-й километр автодороги находятся в одной точке. Известно количество мусора, которое накапливается ежедневно в каждом из контейнеров. Из каждого пункта мусор вывозит отдельный мусоровоз. Стоимость доставки мусора вычисляется как произведение количества мусора на расстояние от пункта до центра переработки. Центр переработки отходов открыли в одном из пунктов сбора мусора таким образом, чтобы общая стоимость доставки мусора из всех пунктов в этот центр была минимальной.\nОпределите минимальные расходы на доставку мусора в центр переработки отходов.\nВходные данные\n27_A.txt\n27_B.txt\nДано два входных файла (файл A и файл B), каждый из которых в первой строке содержит число N (1 ≤ N ≤ 10 000 000)  — количество пунктов сбора мусора на кольцевой автодороге. В каждой из следующих N строк находится число  — количество мусора в контейнере (все числа натуральные, количество мусора в каждом пункте не превышает 1000). Числа указаны в порядке расположения контейнеров на автомагистрали, начиная с первого километра.\nВ ответе укажите два числа: сначала значение искомой величины для файла А, затем  — для файла B.\nТиповой пример организации данных во входном файле\n6\n8\n20\n5\n13\n7\n19\nПри таких исходных данных, если контейнеры установлены на каждом километре автодороги, необходимо открыть центр переработки в пункте 6. В этом случае сумма транспортных затрат составит: 1 · 7 + 0 · 19 + 1 · 8 + 2 · 20 + 3 · 5 + 2 · 13.\nТиповой пример имеет иллюстративный характер. Для выполнения задания используйте данные из прилагаемых файлов.\nПредупреждение: для обработки файла B не следует использовать переборный алгоритм, вычисляющий сумму для всех возможных вариантов, поскольку написанная по такому алгоритму программа будет выполняться слишком долго.","answer":"471228 49113954961677","description":"Сначала считаем количество чисел в файле, затем считаем все числа в массив elems. Поскольку контейнеры для мусора располагаются на каждом третьем километре автодороги, утроим каждый элемент массива. Далее для первого числа, считая его серединой, найдём сумму всех чисел справа от него (rightSum) и сумму всех чисел слева от него (leftSum) (учитываем, что дорога кольцевая, в примере из условия числа слева для числа 19  — это 5, 13 и 7, а числа справа  — это 8 и 20). Также при этом найдём общую стоимость доставки мусора при условии открытия центра переработки в первом пункте (элементе).\nЗаметим, что передвигая центр обработки в следующий пункт новая общая сумма будет равна сумме значения общей суммы центра обработки мусора в предыдущем пункте, значения переменной leftSum и значения элемента, в котором размещался центр обработки на предыдущей итерации, при этом из этого числа следует вычесть значение переменной rightSum и значение элемента, в который был передвинут центр обработки мусора. Также после передвижения центра обработки мусора будем обновлять значения переменных leftSum и rightSum. Все найденные подсуммы будем записывать в массив answers. Минимальное значение в получившемся в итоге массиве answers и будет ответом.","python":"f = open(\"107_27_B.txt\")\nn = int(f.readline())\nelems = [0 for i in range(n)]\nanswers = [0 for i in range(n)]\nsum = 0\nrightSum = 0\nleftSum = 0\nfor i in range(0, n):\n    elems[i] = int(f.readline())\nfor i in range(0, n):\n    elems[i] = elems[i] * 3\nfor i in range(1, n // 2):\n    sum = sum + elems[i] * i + elems[n - i] * i\n    rightSum = rightSum + elems[i]\n    leftSum = leftSum + elems[n - i]\nsum = sum + elems[n // 2] * n // 2\nanswers[0] = sum\nfor i in range(1, n):\n    answers[i] = answers[i - 1] + leftSum + elems[i - 1] - rightSum - elems[(i + (n // 2) - 1) % n]\n    rightSum = rightSum - elems[i] + elems[(i + (n // 2) - 1) % n]\n    leftSum = leftSum - elems[(i + (n // 2)) % n] + elems[i - 1]\nprint(min(answers))\n"},{"id":"6","text":"Дана последовательность натуральных чисел. Необходимо определить количество её непрерывных подпоследовательностей, сумма элементов которых кратна 999.\nВходные данные.\nФайл A\nФайл B\nПервая строка входного файла содержит целое число N  — общее количество чисел в наборе. Каждая из следующих N строк содержит одно число. Гарантируется, что общая сумма всех чисел и число в ответе не превышают 2 · 109 по абсолютной величине.\nВам даны два входных файла (A и B), каждый из которых имеет описанную выше структуру. В ответе укажите два числа: сначала значение искомой суммы для файла A, затем для файла B.","answer":"403 1801801220","description":"Если будет найдена подпоследовательность чисел с остатком от деления суммы элементов этой подпоследовательности на 999 равным 1, чтобы сумма элементов найденной подпоследовательности была кратна 999, достаточно вычесть из неё сумму элементов другой подпоследовательности с остатком 1. Объявим массив lefts, в котором будем хранить количество найденных подпоследовательностей с остатком от деления суммы элементов этой подпоследовательности на 999 от 0 до 998. Каждый раз, находя подпоследовательность с тем или иным остатком от деления суммы элементов этой подпоследовательности на 999, будем прибавлять к переменной count хранящееся в массиве lefts значение с соответствующим остатком от деления суммы элементов этой подпоследовательности.","python":"f = open(\"27-A (1).txt\")\nn = int(f.readline())\nlefts = [0 for i in range(1000)]\ncount = 0\nsumi = 0\nfor i in range(1, n + 1):\n    num = int(f.readline())\n    sumi += num\n    if sumi % 999 == 0:\n        count = count + 1\n    count += lefts[sumi % 999]\n    lefts[sumi % 999] += 1\nprint(count)\n"},{"id":"7","text":"В текстовом файле записан набор пар натуральных чисел, не превышающих 10 000. Необходимо выбрать из набора некоторые пары так, чтобы первое число в каждой выбранной паре было нечётным, сумма бо́льших чисел во всех выбранных парах была нечётной, а сумма меньших  — чётной. Какую наибольшую сумму чисел во всех выбранных парах можно при этом получить?\nВходные данные.\nФайл A\nФайл B\nПервая строка входного файла содержит целое число N  — общее количество пар в наборе. Каждая из следующих N строк содержит пару чисел.\nПример входного файла:\n4\n5 2\n8 15\n7 14\n11 9\nВ данном случае есть три подходящие пары: (5, 2), (7, 14) и (11, 9). Пара (8, 15) не подходит, так как в ней первое число чётное. Чтобы удовлетворить требования, надо взять пары (7, 14) и (11, 9). Сумма бо́льших чисел в этом случае равна 25, сумма меньших равна 16. Общая сумма равна 41. В ответе надо указать число 41.\nВам даны два входных файла (A и B), каждый из которых имеет описанную выше структуру. В ответе укажите два числа: сначала значение искомой суммы для файла A, затем для файла B.","answer":"44067 301653067","description":"Будем последовательно считывать пары из файла. Для каждой считываемой пары будем проверять чётность первого числа в паре. Если первое число в паре чётное  — эта пара не рассматривается. Большее число в считанной паре будем записывать в переменную sum1, меньшее число в считанной паре будем записывать в переменную sum0. Также будем находить значения минимальных сумм для трёх случаев:\n1)  оба числа в паре нечётные  — переменная min1;\n2)  большее число в паре чётное, меньшее число в паре нечётное  — переменная min2;\n3)  большее число в паре нечётное, меньшее число в паре чётное  — переменная min3.\nПеред тем, как выводить найденную сумму, будем делать проверку переменных sum0 и sum1 на чётность.\nЕсли значение в переменной sum0 чётно, а значение в переменной sum1 нечётно  — выводим сумму значений переменных sum0 и sum1 на экран.\nЕсли значение в переменной sum0 нечётно, а значение в переменной sum1 чётно, тогда сравниваем значения переменной min1 и суммы значений переменных min2 + min3. На экран будем выводить сумму значений переменных sum0 и sum1, из которых вычтено меньшее из ранее сравниваемых значений.\nЕсли значение в переменной sum0 нечётно и значение в переменной sum1 нечётно, тогда сравниваем значения переменной min2 и суммы значений переменных min1 + min3. На экран будем выводить сумму значений переменных sum0 и sum1, из которых вычтено меньшее из ранее сравниваемых значений.\nЕсли значение в переменной sum0 чётно и значение в переменной sum1 чётно, тогда сравниваем значения переменной min3 и суммы значений переменных min1 + min2. На экран будем выводить сумму значений переменных sum0 и sum1, из которых вычтено меньшее из ранее сравниваемых значений.","python":"f = open(\"inf_26_04_21_27b.txt\")\nn = int(f.readline())\nsum0 = 0\nsum1 = 0\nmin1 = 20001\nmin2 = 20001\nmin3 = 20001\nfor i in f:\n    x, y = i.split()\n    x = int(x)\n    y = int(y)\n    if x % 2 == 1:\n        if x > y:\n            sum1 = sum1 + x\n            sum0 = sum0 + y\n            if (x % 2 == 1) and (y % 2 == 1) and ((x + y) < min1):\n                    min1 = x + y\n            if (x % 2 == 0) and (y % 2 == 1) and ((x + y) < min2):\n                    min2 = x + y\n            if (x % 2 == 1) and (y % 2 == 0) and ((x + y) < min3):\n                    min3 = x + y\n        else:\n            sum1 = sum1 + y\n            sum0 = sum0 + x\n            if (x % 2 == 1) and (y % 2 == 1) and ((x + y) < min1):\n                min1 = x + y\n            if (y % 2 == 0) and (x % 2 == 1) and ((x + y) < min2):\n                    min2 = x + y\n            if (y % 2 == 1) and (x % 2 == 0) and ((x + y) < min3):\n                    min3 = x + y\nif (sum0 % 2 == 0) and (sum1 % 2 == 1):\n    print(sum0 + sum1)\nelif (sum0 % 2 == 1) and (sum1 % 2 == 0):\n    if min1 < min2 + min3:\n        print(sum0 + sum1 - min1)\n    else:\n        print(sum0 + sum1 - min2 - min3)\nelif (sum0 % 2 == 1) and (sum1 % 2 == 1):\n    if min2 < min3 + min1:\n        print(sum0 + sum1 - min2)\n    else:\n        print(sum0 + sum1 - min3 - min1)\nelif (sum0 % 2 == 0) and (sum1 % 2 == 0):\n    if min3 < min2 + min1:\n        print(sum0 + sum1 - min3)\n    else:\n        print(sum0 + sum1 - min2 - min1)\n"},{"id":"8","text":"У медицинской компании есть N пунктов приёма биоматериалов на анализ. Все пункты расположены вдоль автомагистрали и имеют номера, соответствующие расстоянию от нулевой отметки до конкретного пункта. Известно количество пробирок, которое ежедневно принимают в каждом из пунктов. Пробирки перевозят в специальных транспортировочных контейнерах вместимостью не более 36 штук. Каждый транспортировочный контейнер упаковывается в пункте приёма и вскрывается только в лаборатории.\nСтоимость перевозки биоматериалов равна произведению расстояния от пункта до лаборатории на количество контейнеров с пробирками. Общая стоимость перевозки за день равна сумме стоимостей перевозок из каждого пункта в лабораторию. Лабораторию расположили в одном из пунктов приёма биоматериалов таким образом, что общая стоимость доставки биоматериалов из всех пунктов минимальна.\nОпределите минимальную общую стоимость доставки биоматериалов из всех пунктов приёма в лабораторию.\nВходные данные\nФайл A\nФайл B\nДано два входных файла (файл A и файл B), каждый из которых в первой строке содержит число N (1 ≤ N ≤ 10 000 000)  — количество пунктов приёма биоматериалов. В каждой из следующих N строк находится два числа: номер пункта и количество пробирок в этом пункте (все числа натуральные, количество пробирок в каждом пункте не превышает 1000). Пункты перечислены в порядке их расположения вдоль дороги, начиная от нулевой отметки.\nВ ответе укажите два числа: сначала значение искомой величины для файла А, затем  — для файла B.\nПример организации исходных данных во входном файле:\n6\n1 100\n2 200\n5 4\n7 3\n8 2\n10 190\nПри таких исходных данных и вместимости транспортировочного контейнера, составляющей 96 пробирок, компании выгодно открыть лабораторию в пункте 2. В этом случае сумма транспортных затрат составит:\n1 · 2 + 3 · 1 + 5 · 1 + 6 · 1 + 8 · 2.\nПредупреждение: для обработки файла B не следует использовать переборный алгоритм, вычисляющий сумму для всех возможных вариантов, поскольку написанная по такому алгоритму программа будет выполняться слишком долго.","answer":"51063 5634689219329","description":"Сначала считаем общее количество пунктов. Далее, построчно считаем все данные из файла в список elems, при этом сразу будем считать количество контейнеров, необходимое для перевозки пробирок в очередном пункте. Инициализируем список cost  — в нём будем хранить общую сумму транспортных затрат для размещения лаборатории в каждом из пунктов.\nСначала посчитаем общую стоимость затрат для первого в списке пункта. При в переменной rightSum посчитаем общее количество контейнеров пунктов справа, которые необходимо перевезти (аналогично, в переменной leftSum будем считать общее количество контейнеров пунктов слева). Заметим, что чтобы посчитать общую стоимость затрат для следующего пункта, необходимо вычесть из общей суммы затрат предыдущего пункта значение переменной rightSum, умноженное на разницу расстояний текущего пункта и предыдущего. Также к получившемуся значению необходимо прибавить значение переменной leftSum, умноженное на разницу расстояний текущего пункта и предыдущего. При этом будем обновлять переменные leftSum и rightSum, прибавляя к первой количество контейнеров в предыдущем пункте и отнимая от второй количество контейнеров в текущем пункте.","python":"from math import ceil\n \nf = open(\"27_B.txt\")\nn = int(f.readline())\nelems = []\nsum = 0\nrightSum = 0\nleftSum = 0\nfor i in range(0, n):\n    a, b = map(int, f.readline().split())\n    elems.append([a, ceil(b / 36)])\ncost = [0] * n\nfor i in range(1, n):\n    cost[0] += (elems[i][0] - elems[0][0]) * elems[i][1]\n    rightSum += elems[i][1]\nfor i in range(1, n):\n    leftSum += elems[i - 1][1]\n    cost[i] = cost[i - 1] - rightSum * (elems[i][0] - elems[i - 1][0]) + leftSum * (elems[i][0] - elems[i - 1][0])\n    rightSum -= elems[i][1]\nprint(min(cost))\n"},{"id":"9","text":"Последовательность натуральных чисел характеризуется числом Х  — наибольшим числом, кратным 14 и являющимся произведением двух элементов последовательности с различными номерами. Гарантируется, что хотя бы одно такое произведение в последовательности есть.\nВходные данные.\nФайл A\nФайл B\nДаны два входных файла (файл A и файл B), каждый из которых содержит в первой строке количество чисел N (1 ≤ N ≤ 100000). В каждой из последующих N строк записано одно натуральное число, не превышающее 1000.\nПример организации исходных данных во входном файле:\n5\n40\n1000\n7\n28\n55\nПример выходных данных для приведённого выше примера входных данных:\n28000\nВ ответе укажите два числа: сначала значение искомого произведения для файла А, затем для файла B.","answer":"447552 994000","description":"Произведение двух чисел делится на 14, если:\n— один из сомножителей делится на 14 (второй может быть любым) либо\n— ни один из сомножителей не делится на 14, но один из сомножителей делится на 7, а другой – на 2.\nПоэтому программа, вычисляющая число X, может работать так.\nПрограмма читает все входные данные один раз, не запоминая все данные в массиве. Программа для прочитанного фрагмента входной последовательности хранит значения четырёх величин:\nМ7 – самое большое число, кратное 7, но не кратное 2;\nM2 – самое большое число, кратное 2, но не кратное 7;\nM14 – самое большое число, кратное 14;\nМAX – самое большое число среди всех элементов последовательности, отличное от М14 (если число М14 встретилось более одного раза и оно же является максимальным, то MAX = M14).\nПосле того как все данные прочитаны, искомое число X вычисляется как максимум из произведений М14*MAX и М7*М2.\nНиже приведён пример программы на языке Паскаль, которая реализует описанный алгоритм.","python":"f = open(\"27-B_2.txt\")  # для файла A укажите его название\ns = f.readlines() \nn = int(s[0])\nmaxi = 0\nmax_0 = 0\nmax_2 = 0\nmax_7 = 0\nmax_14 = 0\nfor i in range(1, n + 1):\n    s[i] = int(s[i])\n    if s[i] % 14 == 0:\n        max_14 = max(max_14, s[i])\n    elif s[i] % 7 == 0:\n        max_7 = max(max_7, s[i])\n    elif max_2 % 2 == 0:\n        max_2 = max(max_2, s[i])\n    else:\n        max_0 = max(max_0, s[i])\nmaxi = max(max_14 * max(max_7, max_0, max_2), max_7 * max_2)\nprint(maxi)\n"},{"id":"10","text":"Имеется набор данных, состоящий из пар положительных целых чисел. Необходимо выбрать из каждой пары ровно одно число так, чтобы сумма всех выбранных чисел не делилась на 3 и при этом была максимально возможной. Гарантируется, что искомую сумму получить можно. Программа должна напечатать одно число  — максимально возможную сумму, соответствующую условиям задачи.\nВходные данные.\nФайл A\nФайл B\nДаны два входных файла (файл A и файл B), каждый из которых содержит в первой строке количество пар N (1 ≤ N ≤ 100000). Каждая из следующих N строк содержит два натуральных числа, не превышающих 10 000.\nПример организации исходных данных во входном файле:\n6\n1 3\n5 12\n6 9\n5 4\n3 3\n1 1\nДля указанных входных данных значением искомой суммы должно быть число 32.\nВ ответе укажите два числа: сначала значение искомой суммы для файла А, затем для файла B.\n \nПредупреждение: для обработки файла B не следует использовать переборный алгоритм, вычисляющий сумму для всех возможных вариантов, поскольку написанная по такому алгоритму программа будет выполняться слишком долго.","answer":"127127 399762080","description":"Последовательно считывая данные из файла, будем прибавлять к сумме максимальное число в паре. Также заметим, что в случае, если получившееся в результате суммирования максимальных чисел во всех парах число будет кратно трём, достаточно будет вычесть из этой суммы минимальную разницу между какими-либо двумя числами. Для этого при считывании пар помимо максимального числа в каждой паре будем искать минимальную разницу среди пар, не кратную трём.","python":"f = open(\"27-B_demo (2).txt\")  # для файла A замените название\ns = f.readlines()\nn = int(s[0])  # количество пар\nsummi = 0\nd = 10**6\nfor i in range(1, n + 1):\n    x, y = map(int, s[i].split())\n    summi += max(x, y)\n    if abs(x - y) % 3 != 0:\n        d = min(d, abs(x - y))\nif summi % 3 != 0:\n    print(summi)\nelse:\n    print(summi - d)\n"},{"id":"11","text":"Дана последовательность натуральных чисел. Необходимо найти максимально возможную сумму её непрерывной подпоследовательности, в которой количество чётных элементов кратно k  =  10.\nВходные данные.\nФайл A\nФайл B\nПервая строка входного файла содержит целое число N  — общее количество чисел в наборе. Каждая из следующих N строк содержит одно число. Гарантируется, что общая сумма всех чисел не превышает 2 · 109.\nВам даны два входных файла (A и B), каждый из которых имеет описанную выше структуру. В ответе укажите два числа: сначала значение искомой суммы для файла A, затем для файла B.","answer":"4779554 979258630","description":"Будем последовательно считывать числа из файла. В массив lefts будем записывать первые встречающиеся суммы с количеством чётных элементов, делящимся на 10 с остатком от нуля до девяти. В массив rights также будем записывать суммы с количеством чётных элементов, делящимся на 10 с остатком от нуля до девяти. Если будет встречено несколько сумм с одним и тем же остатком, в массив rights будет записана сумма, встретившаяся позже. Если после считывания всех чисел из файла значение в переменной count не кратно 10, тогда будем проверять разности элементов массивов rights и lefts с соответствующими индексами и выводить на экран наибольшую из таких разностей  — это и будет искомой максимальной суммой.","python":"f = open(\"27-B.txt\")\nn = int(f.readline())\nlefts = [0 for i in range(10)]\nrights = [0 for i in range(10)]\nfor i in range(10):\n    lefts[i] = 0\n    rights[i] = 0\ncount = 0\nsum = 0\nfor i in range(1, n + 1):\n    num = int(f.readline())\n    sum = sum + num\n    if num % 2 == 0:\n        count = count + 1\n    d = count % 10\n    if lefts[d] == 0:\n        lefts[d] = sum\n    rights[d] = sum\nmaxsum = 0\nif count % 10 == 0:\n    print(sum)\nelse:\n    for i in range(1, count % 10 + 1):\n        if (rights[i] - lefts[i]) > maxsum:\n            maxsum = rights[i] - lefts[i]\nif rights[0] > maxsum:\n    maxsum = rights[0]\nprint(maxsum)\n"},{"id":"12","text":"В текстовом файле записан набор натуральных чисел, не превышающих 108. Гарантируется, что все числа различны. Из набора нужно выбрать три числа, сумма которых делится на 3. Какую наименьшую сумму можно при этом получить?\nВходные данные.\nФайл A\nФайл B\nПервая строка входного файла содержит целое число N  — общее количество чисел в наборе. Каждая из следующих N строк содержит одно число.\nПример входного файла:\n4\n5\n8\n14\n11\nВ данном случае есть четыре подходящие тройки: 5, 8, 11 (сумма 24); 5, 8, 14 (сумма 27); 5, 14 11 (сумма 30) и 8, 14, 11 (сумма 33). В ответе надо записать число 24.\nВам даны два входных файла (A и B), каждый из которых имеет описанную выше структуру. В ответе укажите два числа: сначала значение искомой суммы для файла A, затем для файла B.","answer":"327 19851","description":"Заметим, что сумма трёх чисел будет делиться на 3 в четырёх случаях: если каждое из трёх чисел при делении на 3 даёт остаток 0; если каждое из трёх чисел при делении на 3 даёт остаток 1; если каждое из трёх чисел при делении на 3 даёт остаток 2; если одно из чисел при делении на 3 даёт остаток 0, второе число при делении на 3 даёт остаток 1, а третье число при делении на 3 даёт остаток 2. Для всех четырёх случаев объявим переменные sum0, sum1, sum2 и sum12 соответственно. Будем последовательно считывать числа из файла, находя три наименьших числа, дающих при делении на 3 остаток 0, три наименьших числа, дающих при делении на 3 остаток 1 и три наименьших числа, дающих при делении на 3 остаток 2. Для этого объявим три массива из трёх элементов  — m0, m1 и m2. В переменную sum0 запишем сумму элементов массива m0, в переменную sum1 запишем сумму элементов массива m1, в переменную sum2 запишем сумму элементов массива m2, в переменную sum12 запишем сумму первых элементов массивов m0, m1 и m2. Далее на экран будем выведем наименьшую из найденных сумм.","python":"f = open(\"27-B (5).txt\")\ns = f.readlines() \nn = int(s[0])\nm0 = [1 for i in range(4)]\nm1 = [1 for i in range(4)]\nm2 = [1 for i in range(4)]\nfor i in range(1, 4):\n    m0[i] = 100000000\n    m1[i] = 100000000\n    m2[i] = 100000000\nfor i in range(1, n + 1):\n    x = int(s[i])\n    if x % 3 == 0:\n        if x < m0[1]:\n            m0[3] = m0[2]\n            m0[2] = m0[1]\n            m0[1] = x\n        elif x < m0[2]:\n            m0[3] = m0[2]\n            m0[2] = x\n        elif x > m0[3]: m0[3] = x\n    elif x % 3 == 1:\n        if x < m1[1]:\n            m1[3] = m1[2]\n            m1[2] = m1[1]\n            m1[1] = x\n        elif x < m1[2]:\n            m1[3] = m1[2]\n            m1[2] = x\n        elif x < m1[3]: m1[3] = x\n    elif x % 3 == 2:\n        if x < m2[1]:\n            m2[3] = m2[2]\n            m2[2] = m2[1]\n            m2[1] = x\n        elif x < m2[2]:\n            m2[3] = m2[2]\n            m2[2] = x\n        elif x > m2[3]: m2[3] = x\nsum0 = m0[1] + m0[2] + m0[3]\nsum1 = m1[1] + m1[2] + m1[3]\nsum2 = m2[1] + m2[2] + m2[3]\nsum12 = m0[1] + m1[1] + m2[1]\nif (sum0 < sum1) and (sum0 < sum2) and (sum0 < sum12): print(sum0)\nelif (sum1 < sum0) and (sum1 < sum2) and (sum1 < sum12): print(sum1)\nelif (sum2 < sum1) and (sum2 < sum0) and (sum2 < sum12): print(sum2)\nelse: print(sum12)\n"},{"id":"13","text":"Дана последовательность целых чисел. Необходимо найти максимально возможную сумму её непрерывной подпоследовательности, в которой количество положительных нечётных элементов кратно k  =  30.\nВходные данные.\nФайл A\nФайл B\nПервая строка входного файла содержит целое число N  — общее количество чисел в наборе. Каждая из следующих N строк содержит одно число. Гарантируется, что общая сумма любой выборки заданных чисел не превышает 2 · 109 по абсолютной величине.\nВам даны два входных файла (A и B), каждый из которых имеет описанную выше структуру. В ответе укажите два числа: сначала значение искомой суммы для файла A, затем для файла B.","answer":"86097 25057","description":"Для нахождения искомой суммы найдём сумму всех чисел в файле и, если количество нечётных положительных чисел этой суммы не будет кратно 30, вычтем из этой суммы число, являющееся минимальной подсуммой чисел с таким же количеством нечётных положительных чисел, кратных 30, как и у суммы всех чисел в файле.\nБудем последовательно считывать числа из файла. В массив lefts будем записывать первые встречающиеся суммы с количеством нечётных элементов, делящимся на 30 с остатком от нуля до двадцати девяти. Каждое считанное число будем прибавлять к переменной sum. Если очередное встреченное число является нечётным и положительным, будем увеличивать значение счётчика count. Каждую итерацию цикла будем проверять, больше ли текущая максимальная сумма в переменной maxsum больше значения выражения sum − lefts[d] (в этом выражении получаем значение новой подсуммы, с количеством нечётных положительных чисел кратным 30). Если значение переменной maxsum меньше  — обновляем её значение.","python":"f = open(\"27-B.txt\")\nn = int(f.readline())\nlefts = [0 for i in range(30)]\nmaxsum = 0\nfor i in range(30):\n    lefts[i] = 2 * 1000000000\n    count = 0\n    sum = 0\nfor i in range(1, n + 1):\n    num = int(f.readline())\n    sum = sum + num\n    if (num % 2 == 1) and (num > 0):\n        count = count + 1\n    d = count % 30\n    if sum < lefts[d]:\n        lefts[d] = sum\n    maxsum = max(maxsum, sum - lefts[d])\nprint(maxsum)\n"},{"id":"14","text":"Дана последовательность натуральных чисел. Необходимо найти максимально возможную сумму её непрерывной подпоследовательности, в которой количество нечётных элементов кратно k  =  10.\nВходные данные.\nФайл A\nФайл B\nПервая строка входного файла содержит целое число N  — общее количество чисел в наборе. Каждая из следующих N строк содержит одно число. Гарантируется, что общая сумма всех чисел не превышает 2 · 109.\nВам даны два входных файла (A и B), каждый из которых имеет описанную выше структуру. В ответе укажите два числа: сначала значение искомой суммы для файла A, затем для файла B.","answer":"4777208 979268310","description":"Будем последовательно считывать числа из файла. В массив lefts будем записывать первые встречающиеся суммы с количеством нечётных элементов, делящимся на 10 с остатком от нуля до девяти. В массив rights также будем записывать суммы с количеством нечётных элементов, делящимся на 10 с остатком от нуля до девяти. Если будет встречено несколько сумм с одним и тем же остатком, в массив rights будет записана сумма, встретившаяся позже. Если после считывания всех чисел из файла значение в переменной count не кратно 10, тогда будем проверять разности элементов массивов rights и lefts с соответствующими индексами и выводить на экран наибольшую из таких разностей  — это и будет искомой максимальной суммой.","python":"f = open(\"27-B.txt\")\nn = int(f.readline())\nlefts = [0 for i in range(10)]\nrights = [0 for i in range(10)]\nfor i in range(10):\n    lefts[i] = 0\n    rights[i] = 0\ncount = 0\nsum = 0\nfor i in range(1, n + 1):\n    num = int(f.readline())\n    sum = sum + num\n    if num % 2 == 1:\n        count = count + 1\n    d = count % 10\n    if lefts[d] == 0:\n        lefts[d] = sum\n    rights[d] = sum\nmaxsum = 0\nif count % 10 == 0:\n    print(sum)\nelse:\n    for i in range(count % 10 + 1):\n        if (rights[i] - lefts[i]) > maxsum:\n            maxsum = rights[i] - lefts[i]\nif rights[0] > maxsum:\n    maxsum = rights[0]\nprint(maxsum)\n"},{"id":"15","text":"Дана последовательность N целых положительных чисел. Рассматриваются все пары элементов последовательности, разность которых чётна, и в этих парах, по крайней мере, одно из чисел пары делится на 17. Порядок элементов в паре неважен. Среди всех таких пар нужно найти и вывести пару с максимальной суммой элементов. Если одинаковую максимальную сумму имеет несколько пар, можно вывести любую из них. Если подходящих пар в последовательности нет, нужно вывести два нуля.\n \nВходные данные.\nФайл A\nФайл B\nВ первой строке входных данных задаётся количество чисел N (2 ≤ N ≤ 10 000). В каждой из последующих N строк записано одно натуральное число, не превышающее 10 000.\nПример организации исходных данных во входном файле:\n5\n34\n12\n51\n52\n51\nПример выходных данных для приведённого выше примера входных данных:\n51 51\nВ ответе укажите четыре числа: сначала значение искомой пары для файла А (два числа через пробел), затем для файла B (два числа через пробел). Числа пар впишите в порядке убывания.","answer":"8759 3077 10000 9996","description":"нет","python":"f = open(\"27991_B.txt\")  # для файла A укажите его название\ns = f.readlines()\nn = int(s[0])\nmax_ch = 0\nmax_n = 0\nmax_ch17 = 0\nmax_n17 = 0\nfor i in range(1, n + 1):\n    s[i] = int(s[i])\n    if s[i] % 2 == 0:\n        if s[i] % 17 == 0 and s[i] > max_ch17:\n            max_ch17 = s[i]\n        elif s[i] % 17 == 0 and s[i] <= max_ch17:  # поиск второго максимума\n            if s[i] > max_ch:\n                max_ch = s[i]\n        elif s[i] > max_ch:\n            max_ch = s[i]\n    elif s[i] % 2 != 0:\n        if s[i] % 17 == 0 and s[i] > max_n17:\n            max_n17 = s[i]\n        elif s[i] % 17 == 0 and s[i] <= max_n17:\n            if s[i] > max_n:\n                max_n = s[i]\n        elif s[i] > max_n:\n            max_n = s[i]\nif max_n17 + max_n == 0 and max_ch17 + max_ch == 0:\n    print(0, 0)\nelif max_n17 + max_n > max_ch17 + max_ch:\n    print(max_n17, max_n)\nelse:\n    print(max_ch17, max_ch)\n"},{"id":"16","text":"Набор данных состоит из пар натуральных чисел. Необходимо выбрать из каждой пары ровно одно число так, чтобы сумма всех выбранных чисел делилась на 3 и при этом была минимально возможной.\nВходные данные.\nФайл A\nФайл B\nПервая строка входного файла содержит число N  — общее количество пар в наборе. Каждая из следующих N строк содержит два натуральных числа, не превышающих 10 000.\nПример организации исходных данных во входном файле:\n6\n1 3\n5 12\n6 9\n5 4\n3 3\n1 1\nДля указанных данных искомая сумма равна 21.\nВ ответе укажите два числа: сначала значение искомой суммы для файла А, затем для файла B.\n \nПредупреждение: для обработки файла B не следует использовать переборный алгоритм, вычисляющий сумму для всех возможных вариантов, поскольку написанная по такому алгоритму программа будет выполняться слишком долго.","answer":"67407 200168361","description":"Последовательно считывая данные из файла, будем прибавлять к сумме минимальное число в паре. Если сумма чисел делится на 3 с остатком 1, то, чтобы она делилась на 3, к этой сумме необходимо прибавить либо разницу между числами в паре, делящуюся на 3 с остатком 2, либо два раза прибавить к этой сумме разницу между числами в паре, делящуюся на 3 с остатком 1. Также заметим, что если сумма чисел делится на 3 с остатком 2, то, чтобы она делилась на 3, к этой сумме необходимо либо прибавить разницу между числами в паре, делящуюся на 3 с остатком 1, либо два раза прибавить к этой сумме разницу между числами в паре, делящуюся на 3 с остатком 2. Значит, необходимо искать два числа, делящихся на 3 с остатком 1 и являющихся минимальными разницами между числами в парах, и два числа, делящихся на 3 с остатком 2 и являющихся минимальными разницами между числами в парах.","python":"f = open(\"inf_22_10_20_27b.txt\") \ns = f.readlines()\nn = int(s[0])\nsum = 0\ndif1 = 20001\ndif2 = 20001\ndif3 = 20001\ndif4 = 20001\nfor i in range(1, n + 1):\n    x, y = map(int, s[i].split())\n    if x > y: sum += y\n    else: sum += x\n    if (abs(x-y) % 3 == 1) and (abs(x-y) < dif1):\n        dif2 = dif1\n        dif1 = abs(x - y)\n    elif (abs(x-y) % 3 == 1) and (abs(x-y) < dif2): dif2 = abs(x-y)\n    elif (abs(x-y) % 3 == 2) and (abs(x-y) < dif3):\n        dif4 = dif3\n        dif3 = abs(x - y)\n    elif (abs(x-y) % 3 == 2) and (abs(x-y) < dif4): dif4 = abs(x-y)\nif sum % 3 == 0:\n    print(sum)\nelif sum % 3 == 1:\n    if (sum + dif3) < (sum + dif1 + dif2):\n        print(sum + dif3)\n    else: print(sum + dif1 + dif2)\nelif sum % 3 == 2:\n    if ((sum + dif1) < (sum + dif3 + dif4)):\n        print(sum + dif1)\n    else:\n        print(sum + dif3 + dif4)\n"},{"id":"17","text":"Имеется набор данных, состоящий из пар положительных целых чисел. Необходимо выбрать из каждой пары ровно одно число так, чтобы сумма всех выбранных чисел не делилась на 5 и при этом была максимально возможной. Гарантируется, что искомую сумму получить можно. Программа должна напечатать одно число  — максимально возможную сумму, соответствующую условиям задачи.\nВходные данные.\nФайл A\nФайл B\nДаны два входных файла (файл A и файл B), каждый из которых содержит в первой строке количество пар N (1 ≤ N ≤ 100000). Каждая из следующих N строк содержит два натуральных числа, не превышающих 10 000.\nПример организации исходных данных во входном файле:\n6\n1 3\n5 12\n6 9\n5 4\n3 3\n1 1\nДля указанных входных данных значением искомой суммы должно быть число 33.\nВ ответе укажите два числа: сначала значение искомой суммы для файла А, затем для файла B.\n \nПредупреждение: для обработки файла B не следует использовать переборный алгоритм, вычисляющий сумму для всех возможных вариантов, поскольку написанная по такому алгоритму программа будет выполняться слишком долго.","answer":"118951 394491666","description":"Последовательно считывая данные из файла, будем прибавлять к сумме максимальное число в паре. Также заметим, что в случае, если получившееся в результате суммирование максимальных чисел во всех парах число будет кратно пяти, достаточно будет вычесть из этой суммы минимальную разницу между какими-либо двумя числами. Для этого при считывании пар помимо максимального числа в каждой паре будем искать минимальную разницу среди пар, не кратную пяти.","python":"f = open('27-B_1.txt')\nn = int(f.readline())\ns, minn = 0, 20001\nfor i in range(n):\n    x, y = map(int, f.readline().split())\n    s += max(x, y)\n    d = abs(x - y)\n    if d % 5 != 0 :\n        minn = min(d, minn)\nif s % 5 != 0:\n    print(s)\nelse:\n    print(s - minn)\n"},{"id":"18","text":"На вход программы поступает последовательность из целых положительных чисел. Необходимо выбрать такую подпоследовательность подряд идущих чисел, чтобы их сумма была максимальной и делилась на 89, а также её длину. Если таких подпоследовательностей несколько, выбрать такую, у которой длина меньше.\nВходные данные.\nФайл A\nФайл B\nДаны два входных файла (файл A и файл B), каждый из которых содержит в первой строке количество чисел N (2 ≤ N ≤ 68000). В каждой из последующих N строк записано одно целое положительное число, не превышающее 10000. Программа должна вывести длину найденной последовательности.\nПример входного файла:\n8\n2\n3\n4\n93\n42\n34\n5\n95\nДля делителя 50 при указанных входных данных значением искомой суммы должно быть число 100 (3 + 4 + 93 или 5 + 95). Следовательно, ответ на задачу  — 2. В ответе укажите два числа: сначала значение искомой длины для файла A, затем для файла B.","answer":"159 67059","description":"Перебираем все возможные суммы, которые начинаются на i-том элементе и заканчиваются на j-том элементе. Нашли бОльшую сумму  — обновили ms (макс. сумму) и m (мин. длину). Нашли такую же сумму, как уже найденная максимальная  — обновили m при необходимости.","python":"f = open('27_B.txt')\nk, s = 89, 0\nmins = {0: (0, 0)}\nres = []\nfor i in range(1, int(f.readline())+1):\n    s += int(f.readline())\n    if s % k in mins:\n        res += [(s - mins[s % k][0], mins[s % k][1] – i)]\n    else:\n        mins[s % k] = (s, i)\nprint(-max(res)[1])\n"},{"id":"19","text":"Набор данных состоит из пар натуральных чисел. Необходимо выбрать из каждой пары ровно одно число так, чтобы сумма всех выбранных чисел делилась на 3 и при этом была максимально возможной.\nВходные данные.\nФайл A\nФайл B\nПервая строка входного файла содержит число N  — общее количество пар в наборе. Каждая из следующих N строк содержит два натуральных числа, не превышающих 10 000.\nПример организации исходных данных во входном файле:\n6\n1 3\n5 10\n6 9\n5 4\n3 3\n1 1\nДля указанных данных искомая сумма равна 30.\nВ ответе укажите два числа: сначала значение искомой суммы для файла А, затем для файла B.\n \nПредупреждение: для обработки файла B не следует использовать переборный алгоритм, вычисляющий сумму для всех возможных вариантов, поскольку написанная по такому алгоритму программа будет выполняться слишком долго.","answer":"127026 399759471","description":"Последовательно считывая данные из файла, будем прибавлять к сумме максимальное число в паре. Если сумма чисел делится на 3 с остатком 1, то, чтобы она делилась на 3, из этой суммы необходимо вычесть либо разницу между числами в паре, делящуюся на 3 с остатком 1, либо два раза вычесть из этой суммы разницу между числами в паре, делящуюся на 3 с остатком 2. Также заметим, что если сумма чисел делится на 3 с остатком 2, то, чтобы она делилась на 3, из этой суммы необходимо либо вычесть разницу между числами в паре, делящуюся на 3 с остатком 2, либо два раза вычесть из этой суммы разницу между числами в паре, делящуюся на 3 с остатком 1. Значит, необходимо искать два числа, делящихся на 3 с остатком 1 и являющихся минимальными разницами между числами в парах, и два числа, делящихся на 3 с остатком 2 и являющихся минимальными разницами между числами в парах.","python":"f = open('27_B.txt')\nn = int(f.readline())\nsumm = 0\nraznica3 = []\nfor i in range(n):\n    a, b = f.readline().split()\n    a = int(a)\n    b = int(b)\n    summ = summ + max(a, b)\n    r1 = max(a, b) - min(a, b)\n    if r1 % 3 != 0:\n     raznica3.append(r1)\nraznica3 = sorted(raznica3)\nif summ % 3 == 0:\n    print(summ)\nelse:\n    i = 0\n    k = 0\n    while summ % 3 != 0:\n        i = i + 1\n        if summ % 3 != 0:\n            summ = summ - raznica3[i]\n            if summ % 3 == 0:\n                print(summ)\n                break\n            else:\n                summ = summ + raznica3[i]\n                i = i + 1\n        if k < 1:\n            summ = summ - raznica3[0] - raznica3[1]\n            if summ % 3 == 0:\n                print(summ)\n                k = k + 1\n                break\n            else:\n                summ = summ + raznica3[0] + raznica3[1]\n                k = k + 1\n"},{"id":"20","text":"На вход программы поступает последовательность из N целых положительных чисел. Рассматриваются все пары различных элементов последовательности (элементы пары не обязаны стоять в последовательности рядом), такие что ai > aj при i < j ≤ N. Среди пар, удовлетворяющих этому условию, необходимо найти и вывести пару с максимальной суммой элементов, которая делится на 120. Если среди найденных пар максимальную сумму имеют несколько, то можно напечатать любую из них. Если пар заданным условием нет, то программа должна вывести 00.\n \nВходные данные.\nФайл A\nФайл B\nВ первой строке входных данных задаётся количество чисел N (1 ≤ N ≤ 1000). В каждой из последующих N строк записано одно натуральное число, не превышающее 10000.\nВ качестве результата программа должна напечатать элементы искомой пары. Если таких пар несколько, можно вывести любую из них.\nПример организации исходных данных во входном файле:\n7\n1\n119\n2\n118\n3\n237\n123\nПример выходных данных для приведённого выше примера входных данных:\n237 123\nВ ответе укажите четыре числа: сначала значение искомой суммы для файла А (два числа через пробел), затем для файла B (два числа через пробел).","answer":"00 9991 9689 или 9971 9709","description":"Заметим, что сумма двух элементов кратна 120 тогда, когда сумма их остатков от деления на 120 будет равна 120 (или равна 0, если оба числа кратны 120). Необходимо хранить в массиве максимальные числа с остатками от 0 до 119, а каждое новое введённое число складывать с числами из массива и искать наибольшую сумму, кратную 120.","python":"def f(x,dict):\n    for key,keybord in dict.items():\n        if key==x:\n            return keybord\n \ng=open('27.txt')\nn=int(g.readline())\nnumbers=[int(x) for x in g]\ni=0\ndict={}\nk=0\nmaxk=0\nwhile i!=n:\n    for h in range(i+1,n):\n        if ((numbers[h]+numbers[i]) % 120 ==0) and (numbers[h] < numbers[i]) and (numbers.index(numbers[h]) > numbers.index(numbers[i])):\n            dict[numbers[h]+numbers[i]]=numbers[i],numbers[h]\n            k=numbers[h]+numbers[i]\n            maxk=max(k,maxk)\n    i=i+1\nif maxk==0:\n    print('00')\nelse:print('Максимальная сумма:',maxk,'.Искомые элементы:',f(maxk,dict))"}]}