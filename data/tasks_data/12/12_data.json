{"tasks": [{"id": "1", "text": "Исполнитель Редактор получает на вход строку цифр и преобразовывает её. Редактор может выполнять две команды, в обеих командах v и w обозначают цепочки цифр.\nА) заменить (v, w).\nЭта команда заменяет в строке первое слева вхождение цепочки v на цепочку w. Например, выполнение команды\nзаменить (111, 27)\nпреобразует строку 05111150 в строку 0527150. Если в строке нет вхождений цепочки v, то выполнение команды заменить (v, w) не меняет эту строку.\nБ) нашлось (v).\nЭта команда проверяет, встречается ли цепочка v в строке исполнителя Редактор. Если она встречается, то команда возвращает логическое значение «истина», в противном случае возвращает значение «ложь». Строка\nисполнителя при этом не изменяется.\n Цикл\n    ПОКА условие\n        последовательность команд\n    КОНЕЦ ПОКА\n выполняется, пока условие истинно.\n В конструкции\n    ЕСЛИ условие\n        ТО команда1\n        ИНАЧЕ команда2\n    КОНЕЦ ЕСЛИ\n выполняется команда1 (если условие истинно) или команда2 (если условие ложно).\nКакая строка получится в результате применения приведённой ниже программы к строке, состоящей из 68 идущих подряд цифр 8? В ответе запишите полученную строку.\n НАЧАЛО\n ПОКА нашлось (222) ИЛИ нашлось (888)\n    ЕСЛИ нашлось (222)\n        ТО заменить (222, 8)\n        ИНАЧЕ заменить (888, 2)\n    КОНЕЦ ЕСЛИ\n КОНЕЦ ПОКА\n КОНЕЦ", "answer": "28", "description": "Данный алгоритм сначала заменит 9 первых восьмерок на три двойки а затем заменит эти три двойки обратно на одну восьмерку. То есть за четыре повторения цикла из строки убирается 8 восьмерок. За восемь таких групп по четыре повторения, то есть за 8 · 4 = 32 повторения цикла из строки уберется 8 · 8 = 64 восьмерки, и останется 4 восьмерки. Первые три из них будут заменены на двойку.\n\nРешение задачи на языке Python:", "python": "s='8'*68\nwhile ('222' in s) or ('888' in s):\n    if ('222' in s):\n        s=s.replace ('222','8',1)\n    else:\n        s=s.replace ('888','2',1)\nprint(s)", "hasPictures": false}, {"id": "2", "text": "Исполнитель Чертёжник перемещается на координатной плоскости, оставляя след в виде линии. Чертёжник может выполнять команду сместиться на (a, b), где a, b – целые числа. Эта команда перемещает Чертёжника из точки с координатами (x, y) в точку с координатами (x + a, y + b). Например, если Чертёжник находится в точке с координатами (4, 2), то команда сместиться на (2, −3) переместит Чертёжника в точку (6, −1). \nЦикл\nПОВТОРИ число РАЗ\nпоследовательность команд\nКОНЕЦ ПОВТОРИ\nозначает, что последовательность команд будет выполнена указанное число раз (число должно быть натуральным)\nЧертёжнику был дан для исполнения следующий алгоритм (количество повторений и смещения в первой из повторяемых команд неизвестны):\nНАЧАЛО\nсместиться на (–1, 2)\nПОВТОРИ … РАЗ\nсместиться на (…, …)\nсместиться на (–1, –2)\nКОНЕЦ ПОВТОРИ\nсместиться на (–24, –12)\nКОНЕЦ\nПосле выполнения этого алгоритма Чертёжник возвращается в исходную точку. Какое наибольшее число повторений могло быть указано в конструкции «ПОВТОРИ … РАЗ»?", "answer": "5", "description": "Будем считать, что Чертёжник находится в начале координат. После выполнения команды сместиться на (–1, 2) Чертёжник окажется в точке с координатами (–1, 2). После выполнения цикла Чертёжник переместится на (n · (−1) + nx; n(−2) + ny), где x и y — неизвестные смещения. В результате последнего перемещения Чертёжник должен переместиться в начало координат, то есть:\n-1 + n * (-1 + x) - 24 = 0, а также 2 + n * (-2 + y) - 12 = 0.\nn = 25 / (x - 1) и n = 10 / (y - 2)\nПоскольку x — целое, из первого уравнения получаем, что n может быть равно 1, 5, 25. Аналогично, из второго уравнения n может быть равно 1, 2, 5, 10. Таким образом, наибольшее число повторений цикла равно 5.", "python": "нет", "hasPictures": false}, {"id": "3", "text": "Система команд исполнителя РОБОТ, «живущего» в прямоугольном лабиринте на клетчатой плоскости, включает в себя 4 команды-приказа и 4 команды проверки условия. Команды-приказы: вверх, вниз, влево, вправо. При выполнении любой из этих команд РОБОТ перемещается на одну клетку соответственно: вверх ↑, вниз ↓, влево ←, вправо →. Если РОБОТ начнёт движение в сторону находящейся рядом с ним стены, то он разрушится, и программа прервётся.\nДругие 4 команды проверяют истинность условия отсутствия стены у каждой стороны той клетки, где находится РОБОТ: сверху свободно, снизу свободно, слева свободно, справа свободно. Цикл\nПОКА условие\nпоследовательность команд\nКОНЕЦ ПОКА\nвыполняется, пока условие истинно. В конструкции\nЕСЛИ условие\nТО команда1\nИНАЧЕ команда2\nКОНЕЦ ЕСЛИ\nвыполняется команда1 (если условие истинно) или команда2 (если условие ложно). В конструкциях ПОКА и ЕСЛИ условие может содержать команды проверки, а также слова И, ИЛИ, НЕ.\nСколько клеток лабиринта соответствуют требованию, что, начав движение в ней и выполнив предложенную программу, РОБОТ уцелеет и остановится в закрашенной клетке (клетка F6)?\nНАЧАЛО\nПОКА <снизу свободно ИЛИ справа свободно>\nПОКА <справа свободно>\nвправо\nКОНЕЦ ПОКА\nЕСЛИ <снизу свободно>\nТО вниз\nКОНЕЦ ЕСЛИ\nКОНЕЦ ПОКА\nКОНЕЦ", "answer": "18", "description": "При данной программе РОБОТ поступает следующим образом: сперва РОБОТ проверяет, свободна ли клетка справа или снизу от него. Если это так, то РОБОТ переходит к первому действию внутри цикла. В этом цикле пока у правой стороны клетки, в которой находится РОБОТ, нет стены, он продолжает двигаться вправо. Как только это условие перестанет выполняться, он переходит ко второму действию внутри цикла. Второе действие, заключается в следующем: РОБОТ проверяет, есть ли стена у нижней стороны клетки, в которой он находится, и если снизу свободно, РОБОТ передвигается на одну клетку вниз. После чего возвращается к началу внешнего цикла. Проанализировав эту программу, приходим к выводу, что РОБОТ будет двигаться вправо или вниз, пока у него есть такая возможность. РОБОТ при данной программе никогда не разобьётся.\nПроверив все клетки по выведенному нами правилу движения РОБОТА выясняем, что число клеток, удовлетворяющих условию задачи, равно 18.", "python": "нет", "hasPictures": true}]}