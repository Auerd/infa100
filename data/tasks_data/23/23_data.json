{"tasks":[{"id":"1","text":"Исполнитель преобразует число на экране. У исполнителя есть две команды, которым присвоены номера:\n1. Прибавить 1\n2.  Умножить на 2\nПрограмма для исполнителя  — это последовательность команд.\nСколько существует программ, для которых при исходном числе 1 результатом является число 35, при этом траектория вычислений содержит число 10 и не содержит 17?\nТраектория вычислений программы  — это последовательность результатов выполнения всех команд программы. Например, для программы 121 при исходном числе 7 траектория будет состоять из чисел 8, 16, 17.","answer":"98","description":"Искомое количество программ равно произведению количества программ, получающих из числа 1 число 10, на количество программ, получающих из числа 10 число 35, траектория вычислений не должна содержать числа 17.\nПусть R(n)  — количество программ, которые число 1 преобразуют в число n.\nВерны следующие соотношения:\n1.  Если n не делится на 2, то тогда R(n) = R(n − 1), так как существует единственный способ получения n из n − 1  — прибавление единицы.\n2.  Пусть n делится на 2.\nЕсли n > 1, то R(n) = R(n / 2) + R(n - 1).\nR(1) = 1.\nR(2) = R(1) + R(1) = 2.\nR(3) = R(2) = 2.\nR(4) = R(3) + R(2) = 2 + 2 = 4.\nR(5) = R(4) = 4.\nR(6) = R(5) + R(3) = 4 + 2 = 6.\nR(7) = R(6) = 6.\nR(8) = R(7) + R(4) = 6 + 4 = 10.\nR(9) = R(8) = 10.\nR(10) = R(9) + R(5) = 10 + 4 = 14.\nПрограмм для получения числа 35 из числа 10 всего 7, можно их перечислить: 21..1, 121..1, 1121..1, 11121..1, 111121..1, 1111121..1, 11111121..1.\nТаким образом, количество программ, удовлетворяющих условию задачи, равно 14 · 7 = 98.\nЗадачу также можно решить с помощью программы на языке Python:","python":"def F(x,y):\n    if x>y or x==17:\n        return 0\n    if x==y:\n        return 1\n    else:\n        return F(x+1,y)+F(x*2,y)\nprint (F(1,10)*F(10,35))\n"},{"id":"2","text":"Исполнитель Тренер преобразует число на экране.\nУ исполнителя есть две команды, которым присвоены номера:\n1.  Прибавить 1\n2.  Прибавить 2\nПервая команда увеличивает число на экране на 1, вторая увеличивает его на 2.\nПрограмма для исполнителя Тренер – это последовательность команд.\nСколько существует программ, для которых при исходном числе 1 результатом является число 12?","answer":"144","description":"Пусть f (x)   — количество способов получить из числа 1 число х. Заметим, что для x > 2: f(x) = f(x - 1) + f(x - 2).\nf (1) = 1\nf (2) = 1\nf (3) = 2\nf (4) = 3\nf (5) = 5\nf (6) = 8\nf (7) = 13\nf (8) = 21\nf (9) = 34\nf (10) = 55\nf (11) = 89\nf(12) = 144\nЗадачу также можно решить с помощью программы на языке Python:","python":"def f(x, y):\n    if x > y:\n        return 0\n    if x == y:\n        return 1\n    else:\n        return f(x + 1, y) + f(x + 2, y)\nprint(f(1, 12))\n"},{"id":"3","text":"Исполнитель НечетМ преобразует число на экране. У исполнителя НечетМ две команды, которым присвоены номера:\n1.  прибавь 1\n2.  сделай нечётное\nПервая из этих команд увеличивает число x на экране на 1, вторая переводит число x в число 2x+1. Например, вторая команда переводит число 10 в число 21. Программа для исполнителя НечетМ  — это последовательность команд. Сколько существует таких программ, которые число 1 преобразуют в число 25, причём траектория вычислений не содержит число 24? Траектория вычислений программы  — это последовательность результатов выполнения всех команд программы. Например, для программы 121 при исходном числе 7 траектория будет состоять из чисел 8, 17, 18.","answer":"10","description":"Используем метод динамического программирования. Заведем массив dp, где dp[i]  — количество способов получить число i с помощью таких команд.\nБаза динамики:\ndp[1]=1;\nФормула перехода:\ndp[i]=dp[i-1] - если i - четное.\ndp[i]=dp[i-1] + dp[(i-1)/2] - если i нечетное;\nНо при этом если i-1 = 24 или (i-1)/2 = 24, то его не учитываем. Можно заметить, что для числа 25 будет формула\ndp[25]=dp[24] + dp[12], а т. к. dp[24] не считаем, то ответ совпадает с dp[12].\nПосчитаем dp[13] (далее будет приведены значения в ячейках dp от 1 до 12): 1 1 2 2 3 3 5 5 7 7 10 10.\nЗадачу также можно решить с помощью программы на языке Python:","python":"def f(x, y):\n    if x > y or x == 24:\n        return 0\n    if x == y:\n        return 1\n    else:\n        return f(x + 1, y) + f(x * 2 + 1, y)\nprint(f(1,25))\n"},{"id":"4","text":"Исполнитель преобразует число на экране. У исполнителя есть три команды, которым присвоены номера:\n1. Прибавить 1\n2.  Прибавить 2\n3.  Умножить на 3\nПервая команда увеличивает число на экране на 1, вторая увеличивает его на 2, третья  — умножает на 3.\nПрограмма для исполнителя  — это последовательность команд. Сколько существует программ, которые преобразуют исходное число 1 в число 15, и при этом траектория вычислений содержит число 10?\nТраектория вычислений  — это последовательность результатов выполнения всех команд программы. Например, для программы 231 при исходном числе 4 траектория будет состоять из чисел 6, 18, 19.","answer":"672","description":"Пусть R(n)  — количество программ, которые число 1 преобразуют в число n.\nВерны следующие соотношения:\nR(n) = R(n−1) + R(n−2) + R(n/3)(если n  — кратно 3).\nТакже будем учитывать то, что траектория вычислений должна содержать число 10.\nR(1) = 1.\nR(2) = R(1) = 1.\nR(3) = R(2) + R(1) + R(1) = 3.\nR(4) = R(3) + R(2) = 4.\nR(5) = R(4) + R(3) = 7.\nR(6) = R(5) + R(4) + R(2) = 12.\nR(7) = R(6) + R(5) = 19.\nR(8) = R(7) + R(6) = 31.\nR(9) = R(8) + R(7) + R(3) = 53.\nR(10) = R(9) + R(8) = 84.\nR(11) = R(10) = 84.\nR(12) = R(11) + R(10) = 168.\nR(13) = R(12) + R(11) = 252.\nR(14) = R(13) + R(12) = 420.\nR(15) = R(14) + R(13) = 672.\nТаким образом, количество программ, удовлетворяющих условию задачи, равно 672.\nЗадачу также можно решить с помощью программы на языке Python:","python":"def f(x, y):\n    if x > y:\n        return 0\n    if x == y:\n        return 1\n    else:\n        return f(x + 1, y) + f(x + 2, y) + f(x * 3, y)\nprint(f(1, 10) * f(10, 15))\n"},{"id":"5","text":"Исполнитель преобразует число на экране. У исполнителя есть три команды, которым присвоены номера:\n1. Прибавить 1\n2.  Прибавить 2\n3.  Умножить на 3\nПервая команда увеличивает число на экране на 1, вторая увеличивает его на 2, третья  — умножает на 3.\nПрограмма для исполнителя  — это последовательность команд. Сколько существует программ, которые преобразуют исходное число 1 в число 15, и при этом траектория вычислений содержит число 8?\nТраектория вычислений  — это последовательность результатов выполнения всех команд программы. Например, для программы 231 при исходном числе 4 траектория будет состоять из чисел 6, 18, 19.","answer":"651","description":"Пусть R(n)  — количество программ, которые число 1 преобразуют в число n.\nВерны следующие соотношения:\nR(n) = R(n−1) + R(n−2) + R(n/3)(если n  — кратно 3).\nТакже будем учитывать то, что траектория вычислений должна содержать число 8.\nR(1) = 1.\nR(2) = R(1) = 1.\nR(3) = R(2) + R(1) + R(1) = 3.\nR(4) = R(3) + R(2) = 4.\nR(5) = R(4) + R(3) = 7.\nR(6) = R(5) + R(4) + R(2) = 12.\nR(7) = R(6) + R(5) = 19.\nR(8) = R(7) + R(6) = 31.\nR(9) = R(8) = 31.\nR(10) = R(9) + R(8) = 62.\nR(11) = R(10) + R(9) = 93.\nR(12) = R(11) + R(10) = 155.\nR(13) = R(12) + R(11) = 248.\nR(14) = R(13) + R(12) = 403.\nR(15) = R(14) + R(13) = 651.\nТаким образом, количество программ, удовлетворяющих условию задачи, равно 651.\nЗадачу также можно решить с помощью программы на языке Python:","python":"def f(x, y):\n    if x > y:\n        return 0\n    if x == y:\n        return 1\n    else:\n        return f(x + 1, y) + f(x + 2, y) + f(x * 3, y)\nprint(f(1, 8) * f(8, 15))\n"},{"id":"6","text":"Исполнитель Б22 преобразует целое число, записанное на экране. У исполнителя три команды, каждой команде присвоен номер:\n1)  Прибавь 1\n2)  Прибавь 2\n3)  Прибавь следующее\nПервая команда увеличивает число на экране на 1, вторая увеличивает это число на 2, третья прибавляет к числу на экране число, большее на 1 (к числу 3 прибавляется 4, к числу 9 прибавляется 10 и т. д.). Программа для исполнителя Б22  — это последовательность команд. Сколько существует программ, которые число 2 преобразуют в число 10?","answer":"47","description":"Обозначим число программ, преобразующих число 2 в число N как КN. Тогда число N может быть получено либо прибавление единице к N − 1, либо двойки к N − 2, либо из некоторого числа X увеличением на X + 1 (следующее число), так что N = X + X + 1, откуда X = (N − 1) / 2; так могут быть получены только нечетные числа.\nТогда для чётных чисел KN = KN − 1 + KN − 2, а для нечётных  — KN = KN − 1 + KN − 2 + K(N − 1)/2. Заполним таблицу для значений от 2 до 9:\nN        3        4        5        6        7        8        9        10\nKN        1        2        4        6        11        17        30        47\nЗадачу также можно решить с помощью программы на языке Python:","python":"def f(x, y):\n    if x == y:\n        return 1\n    if x > y:\n        return 0\n    else:\n        return f(x + 1, y) + f(x + 2, y) + f(2 * x + 1, y)\nprint(f(2, 10))\n"},{"id":"7","text":"Исполнитель преобразует число на экране. У исполнителя есть три команды, которым присвоены номера:\n1. Прибавить 1\n2.  Прибавить 2\n3.  Умножить на 3\nПервая команда увеличивает число на экране на 1, вторая увеличивает его на 2, третья  — умножает на 3.\nПрограмма для исполнителя  — это последовательность команд. Сколько существует программ, которые преобразуют исходное число 2 в число 16, и при этом траектория вычислений содержит число 11 и не содержит числа 15?\nТраектория вычислений  — это последовательность результатов выполнения всех команд программы. Например, для программы 213 при исходном числе 4 траектория будет состоять из чисел 6, 7, 21.","answer":"195","description":"Искомое количество программ равно количеству программ, получающих из числа 2 число 16. Траектория вычислений не должна содержать число 15 и должна содержать число 11.\nПусть R(n)  — количество программ, которые число 1 преобразуют в число n.\nВерны следующие соотношения:\n1.  R(n) = R(n−1) + R(n−2) + R(n/3)  — если n делится на три, при n > 2.\n2.  R(n) = R(n−1) + R(n−2)  — если n не делится на три, при n > 2.\nR(2) = 1.\nR(3) = R(2) = 1\nR(4) = R(2) + R(3) = 2\nR(5) = R(4) + R(3) = 3\nR(6) = R(5) + R(4) + R(2) = 6\nR(7) = R(6) + R(5) = 9\nR(8) = R(7) + R(6) = 15\nR(9) = R(8) + R(7) + R(3) = 25\nR(10) = R(9) + R(8) = 40\nR(11) = R(10) + R(9) = 65\nR(12) = R(11) = 65 (R(4) и R(10) не учитываем, поскольку траектория должна содержать число 11)\nR(13) = R(12) + R(11) = 130\nR(14) = R(13) + R(12) = 195\nR(16) = R(14) = 195 (R(15) не учитываем, поскольку траектория должна не должна содержать число 15)\nТаким образом, количество программ, удовлетворяющих условию задачи, равно 195.\nЗадачу также можно решить с помощью программы на языке Python:","python":"def f(x, y):\n    if x > y or x == 15:\n        return 0\n    if x == y:\n        return 1\n    else:\n        return f(x + 1, y) + f(x + 2, y) + f(x * 3, y)\nprint(f(2, 11) * f(11, 16))\n"},{"id":"8","text":"Исполнитель РазДваТри преобразует число на экране.\nУ исполнителя есть три команды, которым присвоены номера:\n1.  Прибавить 1\n2.  Умножить на 2\n3.  Прибавить 3\nПервая команда увеличивает число на экране на 1, вторая умножает его на 2, третья увеличивает на 3.\nПрограмма для исполнителя РазДваТри  — это последовательность команд.\nСколько существует программ, которые преобразуют исходное число 2 в число 14 и при этом траектория вычислений не содержит чисел 5 и 10?\nТраектория вычислений  — это последовательность результатов выполнения всех команд программы. Например, для программы 312 при исходном числе 6 траектория будет состоять из чисел 9, 10, 20.","answer":"26","description":"Искомое количество программ равно количеству программ, получающих из числа 2 число 14. Траектория вычислений не должна содержать чисел 5 и 10.\nПусть R(n)  — количество программ, которые число 2 преобразуют в число n.\nВерно следующее соотношение:\nR(n) = R(n−1) + R(n/2)(если n  — чётно) + R(n-3).\nR(2) = 1\nR(3) = R(2) = 1\nR(4) = R(2) + R(3) = 2\nR(5) = 0\nR(6) = R(3) + R(3) = 2\nR(7) = R(6) + R(4) = 4\nR(8) = R(7) + R(4) = 6\nR(9) = R(8) + R(6) = 8\nR(10) = 0\nR(11) = R(8) = 6\nR(12) = R(11) + R(6) + R(9) = 16\nR(13) = R(12) = 16\nR(14) = R(13) + R(7) + R(11) = 26\nТаким образом, количество программ, удовлетворяющих условию задачи, равно 26.\nЗадачу также можно решить с помощью программы на языке Python:","python":"def f(x, y):\n    if x > y or x == 5 or x == 10:\n        return 0\n    if x == y:\n        return 1\n    else:\n        return f(x + 1, y) + f(x * 2, y) + f(x + 3, y)\nprint(f(2, 14))\n"},{"id":"9","text":"У исполнителя Прибавитель две команды, которым присвоены номера:\n1.  прибавь 1,\n2.  увеличь старшую цифру числа на 1.\nПервая из них увеличивает число на экране на 1, вторая увеличивает на 1 старшую (левую) цифру числа, например число 23 с помощью такой команды превратится в число 33. Если старшая цифра числа равна 9, то вторая команда оставляет это число неизменным. Программа для Прибавителя  — это последовательность команд. Сколько есть программ, которые число 15 преобразуют в число 37?","answer":"20","description":"Обе команды увеличивают исходное число. Старшая цифра  — 1, следовательно, использовать команду 2 более двух раз бессмысленно. Выпишем программы, в которых команда 2 используется два раза: 1122, 2211, 1212, 2121, 2112, 1221. Итого 6 программ.\nВыпишем программы, в которых команда 2 используется один раз. Использовав эту команду в первой позиции, мы получим из числа 15 число 25, следовательно, после этого необходимо будет дописать ещё 12 команд 1 чтобы получить число 37. Таким образом, получаем программы: 211...1, 121...1, и. т. д. Итого имеем 13 программ (двойка побывала в каждой позиции).\nСуществует всего одна программа, в которой команда 2 не используется: 111....1. Таким образом, имеем 6 + 13 + 1  =  20 программ.\nЗадачу также можно решить с помощью программы на языке Python:","python":"def f(x, y):\n    if x > y:\n        return 0\n    if x == y:\n        return 1\n    else:\n        return f(x + 1, y) + f(x + 10, y)\nprint(f(15, 37))\n"},{"id":"10","text":"Исполнитель ДваждыДва преобразует число на экране. У исполнителя есть две команды, которым присвоены номера:\n1. Прибавить 2\n2.  Умножить на 2\nПервая команда увеличивает число на экране на 2, вторая умножает его на 2. Программа для исполнителя ДваждыДва  — это последовательность команд.\nСколько существует программ, которые преобразуют исходное число 1 в число 34, и при этом траектория вычислений содержит число 16?\nТраектория вычислений  — это последовательность результатов выполнения всех команд программы. Например, для программы 212 при исходном числе 4 траектория будет состоять из чисел 8, 10, 20.","answer":"30","description":"Искомое количество программ равно количеству программ, получающих из числа 1 число 16.\nПусть R(n)  — количество программ, которые число 2 преобразуют в число n.\nВерно следующее соотношение:\nR(n) = R(n − 2) + R(n/2)(если n  — чётно и больше одного).\nR(1) = 1\nR(2) = 1\nR(3) = 1\nR(4) = 2\nR(5) = 1\nR(6) = 3\nR(7) = 1\nR(8) = 5\nR(9) = 1\nR(10) = 6\nR(11) = 1\nR(12) = 9\nR(13) = 1\nR(14) = 10\nR(15) = 1\nR(16) = 15\nИз числа 16 число 34 можно получить двумя способами. Первый способ  — последовательностью команд 1..1, второй  — последовательностью команд 21. Таким образом, количество программ, удовлетворяющих условию задачи, равно 15 · 2  =  30.\nЗадачу также можно решить с помощью программы на языке Python:","python":"def f(x, y):\n    if x > y:\n        return 0\n    if x == y:\n        return 1\n    else:\n        return f(x + 2, y) + f(x * 2, y)\nprint(f(1, 16) * f(16, 34))\n"},{"id":"11","text":"Исполнитель преобразует число на экране. У исполнителя есть две команды, которым присвоены номера:\n1. Прибавить 1\n2.  Умножить на 3\nПервая команда увеличивает число на экране на 1, вторая умножает его на 3. Программа для исполнителя  — это последовательность команд.\nСколько существует программ, которые преобразуют исходное число 2 в число 87, и при этом траектория вычислений содержит число 26?\nТраектория вычислений  — это последовательность результатов выполнения всех команд программы. Например, для программы 212 при исходном числе 4 траектория будет состоять из чисел 12, 13, 39.","answer":"55","description":"Искомое количество программ равно произведению количества программ, получающих из числа 2 число 26, на количество программ, получающих из числа 26 число 87, при этом траектория вычислений должна содержать число 28.\nПусть R(n)  — количество программ, которые число 2 преобразуют в число n.\nВерны следующие соотношения:\nR(n) = R(n−1) + R(n/3)(если n  — кратно 3).\nR(2) = 1.\nR(3) = 1.\nR(4) = 1.\nR(5) = 1.\nR(6) = 2.\nR(7) = 2.\nR(8) = 2.\nR(9) = 3\n.R(10) = 3.\nR(11) = 3.\nR(12) = 4.\nR(13) = 4.\nR(14) = 4.\nR(15) = 5.\nR(16) = 5.\nR(17) = 5.\nR(18) = 7.\nR(19) = 7.\nR(20) = 7.\nR(21) = 9.\nR(22) = 9.\nR(23) = 9.\nR(24) = 11.\nR(25) = 11.\nR(26) = 11.\nИз числа 26 число 87 можно получить пятью способами: последовательностью команд 211...11, последовательностью команд 12111111, последовательностью команд 112111, последовательностью команд 1112 и последовательностью команд 11..11.\nТаким образом, количество программ, удовлетворяющих условию задачи, равно 11 · 5  =  55.\nЗадачу также можно решить с помощью программы на языке Python:","python":"def f(x, y):\n    if x > y:\n        return 0\n    if x == y:\n        return 1\n    else:\n        return f(x + 1, y) + f(x * 3, y)\nprint(f(2, 26) * f(26, 87))\n"},{"id":"12","text":"Исполнитель РазДваТри преобразует число на экране.\nУ исполнителя есть три команды, которым присвоены номера:\n1.  Прибавить 1\n2.  Умножить на 2\n3.  Умножить на 3\nПервая команда увеличивает число на экране на 1, вторая умножает его на 2, третья умножает его на 3.\nПрограмма для исполнителя РазДваТри  — это последовательность команд.\nСколько существует программ, которые преобразуют исходное число 3 в число 50 и при этом траектория вычислений содержит число 15 и не содержит числа 33?\nТраектория вычислений  — это последовательность результатов выполнения всех команд программы. Например, для программы 312 при исходном числе 6 траектория будет состоять из чисел 18, 19, 38.","answer":"121","description":"Искомое количество программ равно произведению количества программ, получающих из числа 3 число 15, на количество программ, получающих из числа 15 число 50. Траектория вычислений не должна содержать числа 33.\nПусть R(n)  — количество программ, которые число 3 преобразуют в число n.\nВерны следующие соотношения:\nR(n) = R(n−1) + R(n/2)(если n  — чётно) + R(n/3)(если n кратно 3).\nR(3) = 1.\nR(4) = R(3) = 1.\nR(5) = R(3) = 1.\nR(6) = R(5) + R(3) = 2.\nR(7) = R(6) = 2.\nR(8) = R(7) + R(4) = 3.\nR(9) = R(8) + R(3) = 4.\nR(10) = R(9) + R(5) = 5.\nR(11) = R(10) = 5.\nR(12) = R(11) + R(6) + R(4) = 8.\nR(13) = R(12) = 8.\nR(14) = R(13) + R(7) =\n10.\nR(15) = R(14) + R(5) = 11.\nПрограмм для получения числа 50 из числа 15, таких, чтобы их траектория не содержала число 33, всего 11, их можно перечислить:\n311111, 1311, 1121...1, 11121...1, 111121...1, 1111121...1, 11111121...1, 11111112111111, 1111111121111, 111111111211, 11111111112.\nТаким образом, количество программ, удовлетворяющих условию задачи, равно 11 · 11 = 121.\nПримечание. 1...1  — последовательность из единиц.\nЗадачу также можно решить с помощью программы на языке Python:","python":"def f(x, y):\n    if x > y or x == 33:\n        return 0\n    if x == y:\n        return 1\n    else:\n        return f(x + 1, y)\n + f(x * 2, y) + f(x * 3, y)\nprint(f(3, 15) * f(15, 50))\n"},{"id":"13","text":"Исполнитель Вычислитель преобразует число на экране.\nУ исполнителя есть три команды, которым присвоены номера:\n1.  Прибавить 1\n2.  Умножить на 3\n3.  Прибавить 2\nПервая команда увеличивает число на экране на 1, вторая умножает его на 3, третье увеличивает его на 2.\nПрограмма для исполнителя Вычислитель  — это последовательность команд.\nСколько существует программ, которые преобразуют исходное число 2 в число 12 и при этом траектория вычислений содержит числа 9 и 11?\nТраектория вычислений программы  — это последовательность результатов выполнения всех команд программы. Например, для программы 132 при исходном числе 7 траектория будет состоять из чисел 8, 10, 30.","answer":"50","description":"Искомое количество программ равно количеству программ, получающих из числа 2 число 12, при этом траектория вычислений должна содержать числа 9 и 11.\nПусть R(n)  — количество программ, которые число 2 преобразуют в число n.\nВерны следующие соотношения:\nR(n) = R(n−1) + R(n/3)(если n  — кратно 3) + R(n−2).\nR(2) = 1.\nR(3) = R(2) = 1.\nR(4) = R(2) + R(3) = 2.\nR(5) = R(4) + R(3) = 3.\nR(6) = R(5) + R(2) + R(4) = 6.\nR(7) = R(6) + R(5) = 9.\nR(8) = R(7) + R(6) = 15.\nR(9) = R(8) + R(3) + R(7) = 25.\nR(10) = R(9) = 25.\nR(11) = R(10) + R(9) = 50.\nR(12) = R(11) = 50.\nТаким образом, количество программ, удовлетворяющих условию задачи, равно 50.\nЗадачу также можно решить с помощью программы на языке Python:","python":"def f(x, y):\n    if x > y:\n        return 0\n    if x == y:\n        return 1\n    else:\n        return f(x + 1, y) + f(x * 3, y) + f(x + 2, y)\nprint(f(2, 9) * f(9, 11) * f(11, 12))\n"},{"id":"14","text":"Исполнитель Май16 преобразует число на экране.\nУ исполнителя есть две команды, которым присвоены номера:\n1. Прибавить 1\n2. Прибавить 2\nПервая команда увеличивает число на экране на 1, вторая увеличивает его на 2. Программа для исполнителя Май16  — это последовательность команд. Сколько существует программ, для которых при исходном числе 1 результатом является число 14 и при этом траектория вычислений содержит число 7, но не содержит числа 9? Траектория вычислений программы  — это последовательность результатов выполнения всех команд программы. Например, для программы 121 при исходном числе 7 траектория будет состоять из чисел 8, 10, 11.","answer":"65","description":"Заметим, что из числа 7 мы сможем получить только число 8, поскольку 9 запрещено. В свою очередь, из 8 мы сможем получить только 10. Таким образом, искомое количество программ равно произведению количества программ, получающих из числа 1 число 7, на количество программ, получающих из числа 10 число 14. Заметим, что количество способов получить из числа 10 число 14 равно количеству способов получить из числа 1 число 5.\nПусть f(x)  - количество способов получить из числа 1 число х. Заметим, что для x > 2: f(x) = f(x - 1) + f(x - 2).\nf(1) = 1\nf(2) = 1\nf(3) = 2\nf(4) = 3\nf(5) = 5\nf(6)= 8\nf(7) = 13\nf(7) * f(5) = 13 * 5 = 65\nЗадачу также можно решить с помощью программы на языке Python:","python":"def f(x, y):\n    if x > y or x == 9:\n        return 0\n    if x == y:\n        return 1\n    else:\n        return f(x + 1, y) + f(x + 2, y)\nprint(f(1, 7) * f(7, 14))\n"},{"id":"15","text":"Исполнитель РазДваТри преобразует число на экране.\nУ исполнителя есть три команды, которым присвоены номера:\n1.  Прибавить 1\n2.  Умножить на 2\n3.  Прибавить 3\nПервая команда увеличивает число на экране на 1, вторая умножает его на 2, третья увеличивает на 3.\nПрограмма для исполнителя РазДваТри  — это последовательность команд.\nСколько существует программ, которые преобразуют исходное число 3 в число 16 и при этом траектория вычислений не содержит чисел 6 и 12?\nТраектория вычислений  — это последовательность результатов выполнения всех команд программы. Например, для программы 312 при исходном числе 6 траектория будет состоять из чисел 9, 10, 20.\nСпрятать решение\nРешение.\nИскомое количество программ равно количеству программ, получающих из числа 3 число 16. Траектория вычислений не должна содержать чисел 6 и 12.\nПусть R(n)  — количество программ, которые число 3 преобразуют в число n.\nВерно следующее соотношение:\nR(n) = R(n−1) + R(n/2)(если n  — чётно) + R(n-3).\nR(3) = 1\nR(4) = 1\nR(5) = 1\nR(6) = 0\nR(7) = 1\nR(8) = R(4) + R(5) + R(7) = 3\nR(9) = R(8) = 3\nR(10) = R(5) + R(7) + R(9) = 5\nR(11) = R(8) + R(10) = 8\nR(12) = 0\nR(13) = R(10) = 5\nR(14) = R(7) + R(11) + R(13) = 14\nR(15) = R(14) = 14\nR(16) = R(8) + R(13) + R(15) = 22\nТаким образом, количество программ, удовлетворяющих условию задачи, равно 22.","answer":"22","description":"Искомое количество программ равно количеству программ, получающих из числа 3 число 16. Траектория вычислений не должна содержать чисел 6 и 12.\nПусть R(n)  — количество программ, которые число 3 преобразуют в число n.\nВерно следующее соотношение:\nR(n) = R(n−1) + R(n/2)(если n  — чётно) + R(n-3).\nR(3) = 1\nR(4) = 1\nR(5) = 1\nR(6) = 0\nR(7) = 1\nR(8) = R(4) + R(5) + R(7) = 3\nR(9) = R(8) = 3\nR(10) = R(5) + R(7) + R(9) = 5\nR(11) = R(8) + R(10) = 8\nR(12) = 0\nR(13) = R(10) = 5\nR(14) = R(7) + R(11) + R(13) = 14\nR(15) = R(14) = 14\nR(16) = R(8) + R(13) + R(15) = 22\nТаким образом, количество программ, удовлетворяющих условию задачи, равно 22.\nЗадачу также можно решить с помощью программы на языке Python:","python":"def f(x, y):\n    if x > y or x == 6 or x == 12:\n        return 0\n    if x == y:\n        return 1\n    else:\n        return f(x + 1, y) + f(x * 2, y) + f(x + 3, y)\nprint(f(3, 16))\n"},{"id":"16","text":"У исполнителя Полтор две команды, которым присвоены номера:\n1.  прибавь один,\n2.  умножь на полтора.\nПервая из них увеличивает на 1 число на экране, вторая увеличивает это число в 1,5 раза, если число чётное. К нечётным числам вторая команда неприменима.\nПрограмма для Полтора - это последовательность команд.\nСколько существует программ, которые число 1 преобразуют в число 22?","answer":"44","description":"Обозначим R(n)  — количество программ, которые преобразуют число 1 в число n.\nВерны следующие утверждения:\n1.  Если n делится на 1,5 и результат деления  — нечётное число, то тогда R(n) = R(n−1), так как существует единственный способ получения n из (n−1)  — прибавлением единицы.\n2.  Если n делится на 1,5 и результат деления  — чётное число, тогда R(n) = R(n / 1,5) + R(n − 1). Достаточно вычислить все значения R(n). Заметим, что R от четного числа всегда равно нулю. R от числа, которое после вычитания 1 не кратно 2, тоже равно нулю.\nR(2) = 1,\nR(3) = 2 (можно умножить двойку на 1,5 или прибавить 1 к единице),\nR(4) = R(3) = 2,\nR(5) = R(4) = 2,\nR(6) = R(4) + R(5) = 4,\n...\nR(9) = R(6) + R(8) = 4 + 4 = 8,\n...\nR(12) = R(8) + R(11) = 4 + 8 = 12,\n...\nR(15) = R(10) + R(14) = 8 + 12 = 20,\n...\nR(18) = R(12) + R(17) = 12 + 20 = 32,\n...\nR(21) = R(14) + R(7) = 12 + 32 = 44.\nR(22) = R(19) + R(7) = 44.\nЗадачу также можно решить с помощью программы на языке Python:","python":"def f(x, y):\n    if x == y:\n        return 1\n    if x > y:\n        return 0\n    else:\n        if x % 2 == 0:\n            return f(x + 1, y) + f(x * 1.5, y)\n        else:\n            return f(x + 1, y)\nprint(f(1, 22))\n"},{"id":"17","text":"Исполнитель ТР4 преобразует число на экране.\nУ исполнителя есть две команды, которым присвоены номера:\n1.  Прибавить 1\n2.  Умножить на 2\nПервая команда увеличивает число на экране на 1, вторая умножает его на 2.\nПрограмма для исполнителя ТР4  — это последовательность команд.\nСколько существует программ, которые преобразуют исходное число 2 в число 35 и при этом траектория вычислений содержит число 15 и не содержит числа 31?\nТраектория вычислений  — это последовательность результатов выполнения всех команд программы. Например, для программы 212 при исходном числе 7 траектория будет состоять из чисел 14, 15, 30.","answer":"26","description":"Искомое количество программ равно произведению количества программ, получающих из числа 2 число 15, на количество программ, получающих из числа 15 число 35, траектория вычислений не должна содержать числа 31.\nПусть R(n)  — количество программ, которые число 2 преобразуют в число n.\nВерны следующие соотношения:\n1.  Если n не делится на 2, то тогда R(n) = R(n - 1), так как существует единственный способ получения n из n − 1  — прибавление единицы.\n2.  Пусть n делится на 2.\nЕсли n > 2, то R(n) = R(n / 2) + R(n - 1).\nЕсли n = 2 то R(n) = 1 (два способа: прибавление единицы и удвоение).\nR(2) = 1.\nR(3) = 1.\nR(4) = R(2) + R(3) = 2.\nR(5) = R(4) = 2.\nR(6) = R(3) + R(5) = 3.\nR(7) = R(6) = 3.\nR(8) = R(4) + R(7) = 5.\nR(9) = R(8) = 5.\nR(10) = R(5) + R(9) = 7.\nR(11) = R(10) = 7.\nR(12) = R(6) + R(11) = 10.\nR(13) = R(12) = 10.\nR(14) = R(7) + R(13) = 13.\nR(15) = R(14) = 13.\nПрограмм для получения числа 35 из числа 15 всего 2, можно их перечислить: 12111 и 1121.\nТаким образом, количество программ, удовлетворяющих условию задачи, равно 13 · 2 = 26.\nЗадачу также можно решить с помощью программы на языке Python:","python":"def f(x, y):\n    if x > y or x == 31:\n        return 0\n    if x == y:\n        return 1\n    else:\n        return f(x + 1, y) + f(x * 2, y)\nprint(f(2, 15) * f(15, 35))\n"},{"id":"18","text":"Исполнитель Май17 преобразует число на экране.\nУ исполнителя есть две команды, которым присвоены номера:\n1.  Прибавить 1\n2.  Прибавить 3\nПервая команда увеличивает число на экране на 1, вторая увеличивает его на 3. Программа для исполнителя Май17  — это последовательность команд.\nСколько существует программ, для которых при исходном числе 1 результатом является число 15 и при этом траектория вычислений содержит число 8? Траектория вычислений программы – это последовательность результатов выполнения всех команд программы. Например, для программы 121 при исходном числе 7 траектория будет состоять из чисел 8, 11, 12.","answer":"81","description":"Используем метод динамического программирования. Заведем массив dp, где dp[i]  — количество способов получить число i с помощью таких команд.\nБаза динамики:\ndp[1]=1;\nФормула перехода:\ndp[i]=dp[i-1] + dp[i-3]\nНо при этом не учитываются такие числа, которые больше 8, но в них мы можем добраться из значения меньше 8. Далее будет приведены значения в ячейках dp от 1 до 15: 1 1 1 2 3 4 6 9 9 9 18 27 36 54 81.\nЗадачу также можно решить с помощью программы на языке Python:","python":"def f(x, y):\n    if x > y:\n        return 0\n    if x == y:\n        return 1\n    else:\n        return f(x + 1, y) + f(x + 3, y)\nprint(f(1, 8) * f(8, 15))\n"},{"id":"19","text":"Исполнитель Фибо преобразует число на экране.\nУ исполнителя есть две команды, которым присвоены номера:\n1.  Прибавить 1\n2.  Прибавить 2\nПервая команда увеличивает число на экране на 1, вторая увеличивает его на 2.\nПрограмма для исполнителя Фибо  — это последовательность команд.\nСколько существует программ, которые преобразуют исходное число 2 в число 18 и при этом траектория вычислений содержит число 9 и не содержит числа 14?\nТраектория вычислений  — это последовательность результатов выполнения всех команд программы. Например, для программы 212 при исходном числе 7 траектория будет состоять из чисел 9, 10, 12.","answer":"315","description":"Искомое количество программ равно произведению количества программ, получающих из числа 2 число 9, на количество программ, получающих из числа 9 число 13 и на количество программ, получающих из числа 15 число 18, поскольку траектория вычислений не должна содержать числа 14.\nПусть R(n)  — количество программ, которые число 2 преобразуют в число n, P(n)  — количество программ, которые число 9 преобразуют в число n, а F(n)  — количество программ, которые преобразуют число 15 в число n.\nДля всех n > 4 верны следующие соотношения:\n1.  R(n) = R(n − 1) + R(n − 2), так как существует два способа получения n  — прибавлением единицы или прибавлением двойки. Аналогично P(n) = P(n − 1) + P(n − 2) и F(n) = F(n − 1) + F(n − 2).\nПоследовательно вычислим значения R(n):\nR(2) = 1.\nR(3) = 1.\nR(4) = R(2) + R(3) = 2.\nR(5) = R(3) + R(4) = 3.\nR(6) = R(5) + R(4) = 5.\nR(7) = R(6) + R(5) = 8.\nR(8) = R(7) + R(6) = 13.\nR(9) = R(8) + R(7) = 21.\nТеперь вычислим значения P(n):\nP(9) = 1.\nP(10) = 1.\nP(11) = P(9) + P(10) = 2.\nP(12) = P(10) + P(11) = 3.\nP(13) = P(11) + P(12) = 5.\nТеперь вычислим значения F(n):\nF(15) = 1.\nF(16) = 1.\nF(17) = F(15) + F(16) = 2.\nF(18) = F(16) + F(17) = 3.\nТаким образом, количество программ, удовлетворяющих условию задачи, равно 21 · 5 · 3 = 315.\nЗадачу также можно решить с помощью программы на языке Python:","python":"def f(x, y):\n    if x > y or x == 14:\n        return 0\n    if x == y:\n        return 1\n    else:\n        return f(x + 1, y) + f(x + 2, y)\nprint(f(2, 9) * f(9, 18))\n"},{"id":"20","text":"У исполнителя Удвоитель две команды, которым присвоены номера:\n1.  прибавь 2,\n2.  прибавь 4.\nПервая из них увеличивает на 2 число на экране, вторая увеличивает это число на 4.\nПрограмма для Удвоителя  — это последовательность команд. Сколько существует программ, которые число 2 преобразуют в число 22?","answer":"89","description":"Для сложения справедлив переместительный (коммутативный) закон, значит, порядок команд в программе не имеет значения для результата.\nОбе команды увеличивают исходное число, поэтому количество команд не может превосходить (22 − 2)/2 = 10. При этом минимальное количество команд  — 5 (т. к. (22 −2)/4 = 5).\nТаким образом, команд может быть 5, 6, 7, 8, 9 или 10. Как было сказано выше, порядок команд не имеет значения, каждому числу команд соответствует один набор команд, которые можно расположить в любом порядке. Пяти командам соответствует набор 22222 (1 возможный вариант расположения), 6 командам  — набор 222211 (здесь получается 15 возможных вариантов расположения: это число перестановок с повторениями P6(2,4)=6!/(2! · 4!)), 7 командам  — 2221111 (35 возможных вариантов расположения), 8 командам  — 22111111 (28 возможных вариантов расположения), 9 командам  — 211111111 (9 вариантов расположения), 10 командам  — 1111111111 (1 вариант расположения). Всего имеем 89 программ.\nЗадачу также можно решить с помощью программы на языке Python:","python":"def f(x, y): \n    if x == y:\n        return 1\n    if x > y:\n        return 0\n    else:\n        return f(x + 2, y) + f(x + 4, y)\nprint(f(2, 22))"}]}