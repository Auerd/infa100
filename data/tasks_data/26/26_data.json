{"tasks":[{"id":"1","text":"Системный администратор раз в неделю создаёт архив пользовательских файлов. Однако объём диска, куда он помещает архив, может быть меньше, чем суммарный объём архивируемых файлов. Известно, какой объём занимает файл каждого пользователя.\nПо заданной информации об объёме файлов пользователей и свободном объёме на архивном диске определите максимальное число пользователей, чьи файлы можно сохранить в архиве, а также максимальный размер имеющегося файла, который может быть сохранён в архиве, при условии, что сохранены файлы максимально возможного числа пользователей.\nВходные данные.\nЗадание 26\nВ первой строке входного файла находятся два числа: S  — размер свободного места на диске (натуральное число, не превышающее 10 000) и N  — количество пользователей (натуральное число, не превышающее 3000). В следующих N строках находятся значения объёмов файлов каждого пользователя (все числа натуральные, не превышающие 100), каждое в отдельной строке.\nЗапишите в ответе два числа: сначала наибольшее число пользователей, чьи файлы могут быть помещены в архив, затем максимальный размер имеющегося файла, который может быть сохранён в архиве, при условии, что сохранены файлы максимально возможного числа пользователей.\nПример входного файла:\n100 4\n80\n30\n50\n40\nПри таких исходных данных можно сохранить файлы максимум двух пользователей. Возможные объёмы этих двух файлов 30 и 40, 30 и 50 или 40 и 50. Наибольший объём файла из перечисленных пар  — 50, поэтому ответ для приведённого примера:\n2 50","answer":"200 10","description":"Сначала считаем в массив данные из файла. После этого отсортируем массив в порядке возрастания. Таким образом, последовательно складывая элементы массива с начала и сравнивая сумму с размером свободного места на диске получим максимальное количество пользователей, чьи файлы могут поместиться на диске. Далее, вычитая из найденной суммы наибольший файл в текущей последовательности, будем пробовать прибавлять файлы с большим весом. Если такой файл будет найден, то заменяем значение наибольшего файла, который возможно поместить на диск.","python":"f = open('28139.txt')\ndata = f.readlines()\ns = data[0].split()\ns = int(s[0])\ndel (data[0])  # первая строка больше не нужна, удаляем ее\nfor i in range(0, len(data)):\n    data[i] = int(data[i])\ndata = sorted(data)\nsumma = 0\nfor count in range(0, len(data)):\n    if summa + data[count] > s: break\n    summa += data[count]\nprint(count)\nzapas = s - summa\nfor i in range(0, len(data)):\n    if data[i] - data[count - 1] <= zapas:\n        itog = data[i]\nprint(itog)\n"},{"id":"2","text":"Системный администратор раз в неделю создаёт архив пользовательских файлов. Однако объём диска, куда он помещает архив, может быть меньше, чем суммарный объём архивируемых файлов. Известно, какой объём занимает файл каждого пользователя.\nПо заданной информации об объёме файлов пользователей и свободном объёме на архивном диске определите максимальное число пользователей, чьи файлы можно сохранить в архиве, а также максимальный размер имеющегося файла, который может быть сохранён в архиве, при условии, что сохранены файлы максимально возможного числа пользователей.\nВходные данные.\nЗадание 26\nВ первой строке входного файла находятся два числа: S  — размер свободного места на диске (натуральное число, не превышающее 10 000) и N  — количество пользователей (натуральное число, не превышающее 2000). В следующих N строках находятся значения объёмов файлов каждого пользователя (все числа натуральные, не превышающие 100), каждое в отдельной строке.\nЗапишите в ответе два числа: сначала наибольшее число пользователей, чьи файлы могут быть помещены в архив, затем максимальный размер имеющегося файла, который может быть сохранён в архиве, при условии, что сохранены файлы максимально возможного числа пользователей.\nПример входного файла:\n100 4\n80\n30\n50\n40\nПри таких исходных данных можно сохранить файлы максимум двух пользователей. Возможные объёмы этих двух файлов 30 и 40, 30 и 50 или 40 и 50. Наибольший объём файла из перечисленных пар  — 50, поэтому ответ для приведённого примера:\n2 50","answer":"595 32","description":"Сначала считаем в массив данные из файла. После этого отсортируем массив в порядке возрастания. Таким образом, последовательно складывая элементы массива с начала и сравнивая сумму с размером свободного места на диске получим максимальное количество пользователей, чьи файлы могут поместиться на диске. Далее, вычитая из найденной суммы наибольший файл в текущей последовательности, будем пробовать прибавлять файлы с большим весом. Если такой файл будет найден, то заменяем значение наибольшего файла, который возможно поместить на диск.","python":"f = open('28132.txt')\ndata = f.readlines()\ns = data[0].split()\ns = int(s[0])\ndel (data[0])  # первая строка больше не нужна, удаляем ее\nfor i in range(0, len(data)):\n    data[i] = int(data[i])\ndata = sorted(data)\nsumma = 0\nfor count in range(0, len(data)):\n    if summa + data[count] > s: break\n    summa += data[count]\nprint(count)\nzapas = s - summa\nfor i in range(0, len(data)):\n    if data[i] - data[count - 1] <= zapas:\n        itog = data[i]\nprint(itog)\n"},{"id":"3","text":"В текстовом файле записан набор натуральных чисел, не превышающих 109. Гарантируется, что все числа различны. Необходимо определить, сколько в наборе таких пар чисел, что числа в паре имеют одинаковую чётность, а их сумма тоже присутствует в файле, и чему равна наибольшая из сумм таких пар.\nВходные данные.\nЗадание 26\nПервая строка входного файла содержит целое число N  — общее количество чисел в наборе. Каждая из следующих N строк содержит одно число.\nВ ответе запишите два целых числа: сначала количество пар, затем наибольшую сумму.\nПример входного файла:\n6\n3\n8\n14\n11\n22\n17\nВ данном случае есть две подходящие пары: 3 и 11 (сумма 14), 8 и 14 (сумма 22). В ответе надо записать числа 2 и 22.","answer":"10 933100556","description":"Считаем числа из файла в массив, после чего отсортируем его. Для поиска суммы двух чисел одинаковой чётности из массива будем использовать бинарный поиск. Для этого создадим специальную функцию, которая будет возвращать значение True, если в массиве будет найдено искомое значение. В этом случае в переменной count будем накапливать единицу. Также в переменную maxSum будем записывать максимальное найденное значение, удовлетворяющее условиям.","python":"f = open('inf_26_04_21_26.txt')\nk = f.readlines()\nn = list(map(int, k))\nm = 0\ns = 0\nc = 0\nns = set(n)\nfor i in range(1, len(n) - 1):\n    for j in range(i + 1, len(n)):\n        if ((n[i] + n[j]) % 2 != 1):\n            s = n[i] + n[j]\n            if (s in ns):\n                c += 1\n                if s > m:\n                    m = s\n \nprint(c, m)\n"},{"id":"4","text":"При проведении эксперимента заряженные частицы попадают на чувствительный экран, представляющий из себя матрицу размером 10 000 на 10 000 точек. При попадании каждой частицы на экран в протоколе фиксируются координаты попадания: номер ряда (целое число от 1 до 10 000) и номер позиции в ряду (целое число от 1 до 10 000).\nТочка экрана, в которую попала хотя бы одна частица, считается светлой, точка, в которую ни одна частица не попала,  — тёмной.\nПри анализе результатов эксперимента рассматривают группы светлых точек, расположенных в одном ряду так, что между каждыми двумя соседними светлыми точками находится ровно одна тёмная.\nВам необходимо по заданному протоколу определить максимальную длину такой группы и номер ряда, в котором эта группа встречается. Если таких рядов несколько, укажите минимально возможный номер.\nВходные данные.\nЗадание 26\nПервая строка входного файла содержит целое число N  — общее количество частиц, попавших на экран. Каждая из следующих N строк содержит 2 целых числа: номер ряда и номер позиции в ряду.\nВ ответе запишите два целых числа: сначала максимальную длину непрерывной группы светлых точек, затем  — номер ряда, в котором эта группа встречается.","answer":"9 995","description":"Создадим массив из 10 000 строк, каждая из которых будет представлять из себя 10 000 идущих подряд нулей. Индекс массива будет являться номером ряда, а индекс позиции символа в строке будет являться номером позиции в ряду. Считаем данные из файла, присваивая в соответствующей строке соответствующему символу единицу вместо нуля. Далее, пройдём по каждой строке в массиве и, встречая символы «10», будем увеличивать значение счётчика count на единицу. Если последовательность будет прервана, значение счётчика сбрасывается.","python":"f = open('26 (17).txt')\nn = int(f.readline())\nmaxlen = 0\nscreen = [['0'] * 10001 for i in range(10001)]\nfor i in f:\n    x, y = i.split()\n    screen[int(x)][int(y)] = '1'\nfor i in range(1, 10001):\n    count = 0\n    for j in range(1, 10001):\n        if j % 2 != 0:\n            if (screen[i][j] == '1') and (screen[i][j + 1] == '0'):\n                count = count + 1\n            else:\n                if count > maxlen:\n                    maxlen = count\n                    maxnum = i\n                count = 0\nprint(maxlen, maxnum)\n"},{"id":"5","text":"В лесничестве саженцы сосны высадили параллельными рядами, которые пронумерованы идущими подряд натуральными числами. Растения в каждом ряду пронумерованы натуральными числами начиная с единицы.\nПо данным аэрофотосъёмки известно, в каких рядах и на каких местах растения не прижились. Найдите ряд с наибольшим номером, в котором есть ровно 13 идущих подряд свободных мест для посадки новых сосен, таких, что непосредственно слева и справа от них в том же ряду растут сосны. Гарантируется, что есть хотя бы один ряд, удовлетворяющий этому условию. В ответе запишите два целых числа: наибольший номер ряда и наименьший номер места для посадки из числа найденных в этом ряду подходящих последовательностей из 13 свободных мест.\nВходные данные.\n26.txt\nВ первой строке входного файла находится число N  — количество прижившихся саженцев сосны (натуральное число, не превышающее 20 000). Каждая из следующих N строк содержит два натуральных числа, не превышающих 100 000: номер ряда и номер места в этом ряду, на котором растёт деревце.\nВыходные данные\nДва целых неотрицательных числа: наибольший номер ряда и наименьший номер места в выбранной последовательности из 13 мест, подходящих для посадки новых сосен.\nТиповой пример организации входных данных\n7\n40 3\n40 7\n60 33\n50 125\n50 129\n50 68\n50 72\nДля приведённого примера, при условии, что необходимо 3 свободных места, ответом является пара чисел: 50; 69.\nТиповой пример имеет иллюстративный характер. Для выполнения задания используйте данные из прилагаемых файлов.","answer":"59966 50449","description":"1.  Считаем все пары в двумерный массив, где первое число  — номер ряда, второе  — номер места. Номер места считаем как отрицательное значение, чтобы при сортировке места с меньшим номером (по данным из файла) были больше (в данных). Это существенно сократит поиск нужного места.\n2.  Отсортируем массив.\n3.  Найдем последний элемент в отсортированном массиве, который удовлетворяет условиям:\na)  Два занятых места находятся в одном ряду;\nb)  Разница между проверяемым местом и предыдущим равна 14.\nТак как надо определить минимальный номер свободного места, добавим к номеру найденного места 1 (соседнее справа от минимального значения в паре занятых).","python":"f = open(\"107_26.txt\")\nn = int(f.readline())\nnums = list()\nfor i in f:\n    a, b = i.split()\n    a = int(a)\n    b = int(b)\n    nums.append([a, -b])\nnums.sort()\nr = 0\nm = 0\nfor i in range(1, n - 1):\n    if nums[i][0] == nums[i - 1][0]:\n        if nums[i][1] - nums[i - 1][1] == 14:\n            r = nums[i][0]\n            m = -nums[i][1] + 1\nprint(r, m)\n"},{"id":"6","text":"Системный администратор раз в неделю создаёт архив пользовательских файлов. Однако объём диска, куда он помещает архив, может быть меньше, чем суммарный объём архивируемых файлов. Известно, какой объём занимает файл каждого пользователя.\nПо заданной информации об объёме файлов пользователей и свободном объёме на архивном диске определите максимальное число пользователей, чьи файлы можно сохранить в архиве, а также максимальный размер имеющегося файла, который может быть сохранён в архиве, при условии, что сохранены файлы максимально возможного числа пользователей.\nВходные данные.\nЗадание 26\nВ первой строке входного файла находятся два числа: S  — размер свободного места на диске (натуральное число, не превышающее 10 000) и N  — количество пользователей (натуральное число, не превышающее 2000). В следующих N строках находятся значения объёмов файлов каждого пользователя (все числа натуральные, не превышающие 100), каждое в отдельной строке.\nЗапишите в ответе два числа: сначала наибольшее число пользователей, чьи файлы могут быть помещены в архив, затем максимальный размер имеющегося файла, который может быть сохранён в архиве, при условии, что сохранены файлы максимально возможного числа пользователей.\nПример входного файла:\n100 4\n80\n30\n50\n40\nПри таких исходных данных можно сохранить файлы максимум двух пользователей. Возможные объёмы этих двух файлов 30 и 40, 30 и 50 или 40 и 50. Наибольший объём файла из перечисленных пар  — 50, поэтому ответ для приведённого примера:\n2 50","answer":"458 39","description":"Сначала считаем в массив данные из файла. После этого отсортируем массив в порядке возрастания. Таким образом, последовательно складывая элементы массива с начала и сравнивая сумму с размером свободного места на диске получим максимальное количество пользователей, чьи файлы могут поместиться на диске. Далее, вычитая из найденной суммы наибольший файл в текущей последовательности, будем пробовать прибавлять файлы с большим весом. Если такой файл будет найден, то заменяем значение наибольшего файла, который возможно поместить на диск.","python":"f = open('27886.txt')\ndata = f.readlines()\ns = data[0].split()\ns = int(s[0])\ndel (data[0])  # первая строка больше не нужна, удаляем ее\nfor i in range(0, len(data)):\n    data[i] = int(data[i])\ndata = sorted(data)\nsumma = 0\nfor count in range(0, len(data)):\n    if summa + data[count] > s: break\n    summa += data[count]\nprint(count)\nzapas = s - summa\nfor i in range(0, len(data)):\n    if data[i] - data[count - 1] <= zapas:\n        itog = data[i]\nprint(itog)\n"},{"id":"7","text":"Для перевозки партии грузов различной массы выделен грузовик, но его грузоподъёмность ограничена, поэтому перевезти сразу все грузы не удастся. Грузы массой от 200 до 210 кг грузят в первую очередь, гарантируется, что все такие грузы поместятся. На оставшееся после этого место стараются взять как можно больше грузов. Если это можно сделать несколькими способами, выбирают тот способ, при котором самый большой из выбранных грузов имеет наибольшую массу. Если и при этом условии возможно несколько вариантов, выбирается тот, при котором наибольшую массу имеет второй по величине груз, и т. д. Известны количество грузов, масса каждого из них и грузоподъёмность грузовика. Необходимо определить количество и общую массу грузов, которые будут вывезены при погрузке по вышеописанным правилам.\nВходные данные.\nЗадание 26\nПервая строка входного файла содержит два целых числа: N  — общее количество грузов и M  — грузоподъёмность грузовика в кг. Каждая из следующих N строк содержит одно целое число  — массу груза в кг.\nВ ответе запишите два целых числа: сначала максимально возможное количество грузов, затем их общую массу.\nПример входного файла:\n6 605\n140\n205\n120\n160\n100\n340\nВ данном случае сначала нужно взять груз массой 205 кг. После этого можно вывезти ещё максимум 3 груза. Это можно сделать тремя способами: 140 + 120 + 100, 140 + 160 + 100, 120 + 160 + 100. Выбираем способ, при котором вывозится груз наибольшей возможной массы. Таких способов два: 140 + 160 + 100 и 120 + 160 + 100. Из этих способов выбираем тот, при котором больше масса второго по величине груза, то есть 140 + 160 + 100. Всего получается 4 груза общей массой 605 кг. В ответе надо записать числа 4 и 605.","answer":"123 10000","description":"Сначала считаем в массив данные из файла. После этого отсортируем массив в порядке возрастания. Таким образом, последовательно складывая элементы массива с начала и, сравнивая сумму с размером грузоподъемности грузовика, получим максимальное количество грузов, которые могут поместиться в грузовике. Далее, вычитая из найденной суммы вес наибольшего груза в текущей последовательности, будем пробовать прибавлять грузы с большим весом. Далее такую же последовательность действий применим ко второму по величине грузу, потом к третьему и т. д.","python":"f = open('26 (13).txt') \na, b = f.readline().split()\nd = []\ns = 0\ncount = 0\nfor i in f:\n    if 200 <= int(i) <= 210:\n        s += int(i)\n        count += 1\n    else:\n        d.append(int(i))\nd.sort()\nd2 = []\ni = 0\nwhile sum(d2) + d[i] <= int(b) - s:\n    count += 1\n    d2.append(d[i])\n    i += 1\nk = len(d) - 1\nwhile i > 0:\n    while k >= 0:\n        if sum(d2) - d2[i-1] + d[k] <= int(b) - s and d[k] != 0:\n            d2[i-1] = d[k]\n            d[k] = 0\n            i -= 1\n            break\n        else:\n            k -= 1\ns += sum(d2)\nprint(count, s)\n"},{"id":"8","text":"При проведении эксперимента заряженные частицы попадают на чувствительный экран, представляющий из себя матрицу размером 10 000 на 10 000 точек. При попадании каждой частицы на экран в протоколе фиксируются координаты попадания: номер ряда (целое число от 1 до 10 000) и номер позиции в ряду (целое число от 1 до 10 000).\nТочка экрана, в которую попала хотя бы одна частица, считается светлой, точка, в которую ни одна частица не попала,  — тёмной.\nПри анализе результатов эксперимента рассматривают группы светлых точек, расположенных в одном ряду подряд, то есть без тёмных точек между ними.\nВам необходимо по заданному протоколу определить максимальную длину такой группы и номер ряда, в котором эта группа встречается. Если таких рядов несколько, укажите минимально возможный номер.\nВходные данные.\nЗадание 26\nПервая строка входного файла содержит целое число N  — общее количество частиц, попавших на экран. Каждая из следующих N строк содержит 2 целых числа: номер ряда и номер позиции в ряду.\nВ ответе запишите два целых числа: сначала максимальную длину непрерывной группы светлых точек, затем  — номер ряда, в котором эта группа встречается.","answer":"10 2786","description":"Создадим массив из 10 000 строк, каждая из которых будет представлять из себя 10 000 идущих подряд нулей. Индекс массива будет являться номером ряда, а индекс позиции символа в строке будет являться номером позиции в ряду. Считаем данные из файла, присваивая в соответствующей строке соответствующему символу единицу вместо нуля. Далее, с помощью строкового метода string.ToWords разобьём каждую строку в массиве с разделителем «0», таким образом получим все последовательности из светлых точек в каждом ряду. Далее последовательно пройдём по каждой найденной последовательности светлых точек и найдём последовательность с наибольшей длиной.","python":"f = open('26 (11).txt')\nn = int(f.readline())\na = [[0] * 10001 for j in range(10001)]\nfor i in range(n):\n    x, y = map(int, f.readline().split())\n    a[x][y] = 1\nmaxi = 0\nmini = 0\nfor i in range(10001):\n    count = 0\n    m = 0\n    for j in range(10001):\n        if a[i][j] == 1:\n            count += 1\n            m = max(count, m)\n        else:\n            count = 0\n    if m > maxi:\n        maxi = max(maxi, m)\n        mini = i\nprint(maxi, mini)\n"},{"id":"9","text":"Для перевозки партии грузов различной массы выделен грузовик, но его грузоподъёмность ограничена, поэтому перевезти сразу все грузы не удастся. Грузы массой от 210 до 220 кг грузят в первую очередь, гарантируется, что все такие грузы поместятся. На оставшееся после этого место стараются взять как можно больше грузов. Если это можно сделать несколькими способами, выбирают тот способ, при котором самый большой из выбранных грузов имеет наибольшую массу. Если и при этом условии возможно несколько вариантов, выбирается тот, при котором наибольшую массу имеет второй по величине груз, и т. д. Известны количество грузов, масса каждого из них и грузоподъёмность грузовика. Необходимо определить количество и общую массу грузов, которые будут вывезены при погрузке по вышеописанным правилам.\nВходные данные.\nЗадание 26\nПервая строка входного файла содержит два целых числа: N  — общее количество грузов и M  — грузоподъёмность грузовика в кг. Каждая из следующих N строк содержит одно целое число  — массу груза в кг.\nВ ответе запишите два целых числа: сначала максимально возможное количество грузов, затем их общую массу.\nПример входного файла:\n6 615\n140\n215\n120\n160\n100\n340\nВ данном случае сначала нужно взять груз массой 215 кг. После этого можно вывезти ещё максимум 3 груза. Это можно сделать тремя способами: 140 + 120 + 100, 140 + 160 + 100, 120 + 160 + 100. Выбираем способ, при котором вывозится груз наибольшей возможной массы. Таких способов два: 140 + 160 + 100 и 120 + 160 + 100. Из этих способов выбираем тот, при котором больше масса второго по величине груза, то есть 140 + 160 + 100. Всего получается 4 груза общей массой 615 кг. В ответе надо записать числа 4 и 615.","answer":"122 10000","description":"Сначала считаем в массив данные из файла. После этого отсортируем массив в порядке возрастания. Таким образом, последовательно складывая элементы массива с начала и, сравнивая сумму с размером грузоподъемности грузовика, получим максимальное количество грузов, которые могут поместиться в грузовике. Далее, вычитая из найденной суммы вес наибольшего груза в текущей последовательности, будем пробовать прибавлять грузы с большим весом. Далее такую же последовательность действий применим ко второму по величине грузу, потом к третьему и т. д.","python":"f = open('26.txt')\na, b = f.readline().split()\nd = []\ns = 0\ncount = 0\nfor i in f:\n    if 210 <= int(i) <= 220:\n        s += int(i)\n        count += 1\n    else:\n        d.append(int(i))\nd.sort()\nd2 = []\ni = 0\nwhile sum(d2) + d[i] <= int(b) - s:\n    count += 1\n    d2.append(d[i])\n    i += 1\nk = len(d) - 1\nwhile i > 0:\n    while k >= 0:\n        if sum(d2) - d2[i-1] + d[k] <= int(b) - s and d[k] != 0:\n            d2[i-1] = d[k]\n            d[k] = 0\n            i -= 1\n            break\n        else:\n            k -= 1\ns += sum(d2)\nprint(count, s)\n"},{"id":"10","text":"Системный администратор раз в неделю создаёт архив пользовательских файлов. Однако объём диска, куда он помещает архив, может быть меньше, чем суммарный объём архивируемых файлов. Известно, какой объём занимает файл каждого пользователя.\nПо заданной информации об объёме файлов пользователей и свободном объёме на архивном диске определите максимальное число пользователей, чьи файлы можно сохранить в архиве, а также максимальный размер имеющегося файла, который может быть сохранён в архиве, при условии, что сохранены файлы максимально возможного числа пользователей.\nВходные данные.\nЗадание 26\nВ первой строке входного файла находятся два числа: S  — размер свободного места на диске (натуральное число, не превышающее 10 000) и N  — количество пользователей (натуральное число, не превышающее 5000). В следующих N строках находятся значения объёмов файлов каждого пользователя (все числа натуральные, не превышающие 100), каждое в отдельной строке.\nЗапишите в ответе два числа: сначала наибольшее число пользователей, чьи файлы могут быть помещены в архив, затем максимальный размер имеющегося файла, который может быть сохранён в архиве, при условии, что сохранены файлы максимально возможного числа пользователей.\nПример входного файла:\n100 4\n80\n30\n50\n40\nПри таких исходных данных можно сохранить файлы максимум двух пользователей. Возможные объёмы этих двух файлов 30 и 40, 30 и 50 или 40 и 50. Наибольший объём файла из перечисленных пар  — 50, поэтому ответ для приведённого примера:\n2 50","answer":"397 17","description":"Сначала считаем в массив данные из файла. После этого отсортируем массив в порядке возрастания. Таким образом, последовательно складывая элементы массива с начала и сравнивая сумму с размером свободного места на диске получим максимальное количество пользователей, чьи файлы могут поместиться на диске. Далее, вычитая из найденной суммы наибольший файл в текущей последовательности, будем пробовать прибавлять файлы с большим весом. Если такой файл будет найден, то заменяем значение наибольшего файла, который возможно поместить на диск.","python":"f = open('27881.txt')\ndata = f.readlines()\ns = data[0].split()\ns = int(s[0])\ndel (data[0])  # первая строка больше не нужна, удаляем ее\nfor i in range(0, len(data)):\n    data[i] = int(data[i])\ndata = sorted(data)\nsumma = 0\nfor count in range(0, len(data)):\n    if summa + data[count] > s: break\n    summa += data[count]\nprint(count)\nzapas = s - summa\nfor i in range(0, len(data)):\n    if data[i] - data[count - 1] <= zapas:\n        itog = data[i]\nprint(itog)\n"},{"id":"11","text":"Системный администратор раз в неделю создаёт архив пользовательских файлов. Однако объём диска, куда он помещает архив, может быть меньше, чем суммарный объём архивируемых файлов. Известно, какой объём занимает файл каждого пользователя.\nПо заданной информации об объёме файлов пользователей и свободном объёме на архивном диске определите максимальное число пользователей, чьи файлы можно сохранить в архиве, а также максимальный размер имеющегося файла, который может быть сохранён в архиве, при условии, что сохранены файлы максимально возможного числа пользователей.\nВходные данные.\nЗадание 26\nВ первой строке входного файла находятся два числа: S  — размер свободного места на диске (натуральное число, не превышающее 10 000) и N  — количество пользователей (натуральное число, не превышающее 2000). В следующих N строках находятся значения объёмов файлов каждого пользователя (все числа натуральные, не превышающие 100), каждое в отдельной строке.\nЗапишите в ответе два числа: сначала наибольшее число пользователей, чьи файлы могут быть помещены в архив, затем максимальный размер имеющегося файла, который может быть сохранён в архиве, при условии, что сохранены файлы максимально возможного числа пользователей.\nПример входного файла:\n100 4\n80\n30\n50\n40\nПри таких исходных данных можно сохранить файлы максимум двух пользователей. Возможные объёмы этих двух файлов 30 и 40, 30 и 50 или 40 и 50. Наибольший объём файла из перечисленных пар  — 50, поэтому ответ для приведённого примера:\n2 50","answer":"601 34","description":"Сначала считаем в массив данные из файла. После этого отсортируем массив в порядке возрастания. Таким образом, последовательно складывая элементы массива с начала и сравнивая сумму с размером свободного места на диске получим максимальное количество пользователей, чьи файлы могут поместиться на диске. Далее, вычитая из найденной суммы наибольший файл в текущей последовательности, будем пробовать прибавлять файлы с большим весом. Если такой файл будет найден, то заменяем значение наибольшего файла, который возможно поместить на диск.","python":"f = open('27888.txt')\ndata = f.readlines()\ns = data[0].split()\ns = int(s[0])\ndel (data[0])  # первая строка больше не нужна, удаляем ее\nfor i in range(0, len(data)):\n    data[i] = int(data[i])\ndata = sorted(data)\nsumma = 0\nfor count in range(0, len(data)):\n    if summa + data[count] > s: break\n    summa += data[count]\nprint(count)\nzapas = s - summa\nfor i in range(0, len(data)):\n    if data[i] - data[count - 1] <= zapas:\n        itog = data[i]\nprint(itog)\n"},{"id":"12","text":"В текстовом файле записан набор натуральных чисел, не превышающих 109. Гарантируется, что все числа различны. Необходимо определить, сколько в наборе таких пар чётных чисел, что их среднее арифметическое тоже присутствует в файле, и чему равно наибольшее из средних арифметических таких пар.\nВходные данные.\nЗадание 26\nПервая строка входного файла содержит целое число N  — общее количество чисел в наборе. Каждая из следующих N строк содержит одно число.\nВ ответе запишите два целых числа: сначала количество пар, затем наибольшее среднее арифметическое.\nПример входного файла:\n6\n3\n8\n14\n11\n2\n17\nВ данном случае есть две подходящие пары: 8 и 14 (среднее арифметическое 11), 14 и 2 (среднее арифметическое 8). В ответе надо записать числа 2 и 11.","answer":"15 976339247","description":"Считаем числа из файла в массив, после чего отсортируем его. Для поиска среднего значения двух чётных чисел из массива будем использовать бинарный поиск. Для этого создадим специальную функцию, которая будет возвращать значение True, если в массиве будет найдено искомое значение. В этом случае в переменной count будем накапливать единицу. Также в переменную maxSredn будем записывать максимальное найденное значение, удовлетворяющее условиям.","python":"f = open('26 (1).txt')\nk = f.readlines()\nn = list(map(int, k))\nm = 0\ns = 0\nc = 0\nns = set(n)\nfor i in range(1, len(n) - 1):\n    for j in range(i + 1, len(n)):\n        if n[i] % 2 == 0 and n[j] % 2 == 0:\n            s = (n[i] + n[j]) // 2\n            if s in ns:\n                c += 1\n                if s > m:\n                    m = s\nprint(c, m)\n"},{"id":"13","text":"Во многих компьютерных системах текущее время хранится в формате «UNIX-время»  — количестве секунд от начала суток 1 января 1970 года.\nВ одной компьютерной системе проводили исследование загруженности. Для этого в течение месяца с момента UNIX-времени 1633046400 фиксировали и заносили в базу данных моменты старта и финиша всех процессов, действовавших в этой системе.\nВам необходимо определить, какое наибольшее количество процессов выполнялось в системе одновременно на неделе, начавшейся в момент UNIX-времени 1633305600, и в течение какого суммарного времени (в секундах) выполнялось такое наибольшее количество процессов.\nВходные данные.\nЗадание 26\nПервая строка входного файла содержит целое число N  — общее количество процессов за весь период наблюдения. Каждая из следующих N строк содержит 2 целых числа: время старта и время завершения одного процесса в виде UNIX-времени. Все данные в строках входного файла отделены одним пробелом.\nЕсли в качестве времени старта указан ноль, это означает, что процесс был активен в момент начала исследования. Если в качестве времени завершения указан ноль, это означает, что процесс не завершился к моменту окончания исследования.\nПри совпадающем времени считается, что все старты и завершения процессов происходят одновременно, в начале соответствующей секунды. В частности, если время старта одного процесса совпадает с временем завершения другого и других стартов и завершений в этот момент нет, то количество активных процессов в этот момент не изменяется.\nВ ответе запишите два целых числа: сначала максимальное количество процессов, которые выполнялись одновременно на неделе, начиная с момента UNIX-времени 1633305600, затем суммарное количество секунд, в течение которых на этой неделе выполнялось такое максимальное количество процессов.","answer":"5000 46","description":"Заметим, что неделя в формате UNIX-времени  — это 604800 секунд. Создадим массив time_process размером 604800 элементов  — в нём будем отображать данные о процессах, начавшихся на неделе, начавшейся с момента UNIX-времени 1633305600. Объявим переменную max_process  — в ней будем хранить, какое наибольшее количество процессов выполнялось в системе одновременно на неделе. Объявим переменную sum_time  — в ней будем хранить суммарное количество секунд, в течение которых на этой неделе выполнялось максимальное количество процессов. Переменную count будем использовать для подсчёта текущего количество выполняемых процессов на неделе в данную секунду.\nЕсли процесс начался до требуемой недели, а закончился после начала этой недели, будем сразу увеличивать значение счётчика count. Если процесс начался на требуемой неделе, к элементу массива time_process, соответствующему секунде начала очередного процесса на неделе, будем прибавлять единицу. Если процесс окончился на требуемой неделе, от элемента массива time_process, соответствующему секунде окончания очередного процесса на наделе, будем отнимать единицу  — таким образом учтём условие, что если время старта одного процесса совпадает с временем завершения другого и других стартов и завершений в этот момент нет, то количество активных процессов в этот момент не изменяется. Учитывая условия выше, считаем файл. После этого в цикле «for» переберём элементы массива time_process, прибавляя к счётчику count значения элементов этого массива. Если значение count окажется больше значения переменной max_process  — будем обновлять значение этой переменной. В этом же цикле найдём суммарное количество секунд, в течение которого выполнялось наибольшее количество процессов  — к переменной sum_time будем добавлять единицу каждый раз, когда будет выполнятся условие count  =  max_process. Если будет встречена ситуация, когда count > max_process  — будем обнулять переменную sum_time.","python":"f = open(\"26 (7).txt\")\nn = int(f.readline())\nstart_time = 1633305600\nend_time = start_time + 604800\ncount = 0\ntime_process = [0 for i in range(0, 604801)]\nfor i in f:\n    start_process, end_process = i.split()\n    if (int(start_process) < start_time) and ((int(end_process) > start_time) or (int(end_process) == 0)):\n        count = count + 1\n    if (int(start_process) >= start_time) and (int(start_process) <= end_time):\n        time_process[int(start_process) - start_time] = time_process[int(start_process) - start_time] + 1\n    if (int(end_process) >= start_time) and (int(end_process) <= end_time):\n        time_process[int(end_process) - start_time] = time_process[int(end_process) - start_time] - 1\nsum_time = 0\nmax_process = 0\nfor i in range(1, 604801):\n    count = count + time_process[i]\n    if count > max_process:\n        max_process = count\n        sum_time = 0\n    if count == max_process:\n        sum_time = sum_time + 1\nprint(max_process, sum_time)\n"},{"id":"14","text":"Системный администратор раз в неделю создаёт архив пользовательских файлов. Однако объём диска, куда он помещает архив, может быть меньше, чем суммарный объём архивируемых файлов. Известно, какой объём занимает файл каждого пользователя.\nПо заданной информации об объёме файлов пользователей и свободном объёме на архивном диске определите максимальное число пользователей, чьи файлы можно сохранить в архиве, а также максимальный размер имеющегося файла, который может быть сохранён в архиве, при условии, что сохранены файлы максимально возможного числа пользователей.\nВходные данные.\nЗадание 26\nВ первой строке входного файла находятся два числа: S  — размер свободного места на диске (натуральное число, не превышающее 10 000) и N  — количество пользователей (натуральное число, не превышающее 3000). В следующих N строках находятся значения объёмов файлов каждого пользователя (все числа натуральные, не превышающие 100), каждое в отдельной строке.\nЗапишите в ответе два числа: сначала наибольшее число пользователей, чьи файлы могут быть помещены в архив, затем максимальный размер имеющегося файла, который может быть сохранён в архиве, при условии, что сохранены файлы максимально возможного числа пользователей.\nПример входного файла:\n100 4\n80\n30\n50\n40\nПри таких исходных данных можно сохранить файлы максимум двух пользователей. Возможные объёмы этих двух файлов 30 и 40, 30 и 50 или 40 и 50. Наибольший объём файла из перечисленных пар  — 50, поэтому ответ для приведённого примера:\n2 50","answer":"650 27","description":"Сначала считаем в массив данные из файла. После этого отсортируем массив в порядке возрастания. Таким образом, последовательно складывая элементы массива с начала и сравнивая сумму с размером свободного места на диске получим максимальное количество пользователей, чьи файлы могут поместиться на диске. Далее, вычитая из найденной суммы наибольший файл в текущей последовательности, будем пробовать прибавлять файлы с большим весом. Если такой файл будет найден, то заменяем значение наибольшего файла, который возможно поместить на диск.","python":"f = open('27885.txt')\ndata = f.readlines()\ns = data[0].split()\ns = int(s[0])\ndel (data[0])  # первая строка больше не нужна, удаляем ее\nfor i in range(0, len(data)):\n    data[i] = int(data[i])\ndata = sorted(data)\nsumma = 0\nfor count in range(0, len(data)):\n    if summa + data[count] > s: break\n    summa += data[count]\nprint(count)\nzapas = s - summa\nfor i in range(0, len(data)):\n    if data[i] - data[count - 1] <= zapas:\n        itog = data[i]\nprint(itog)\n"},{"id":"15","text":"В магазине для упаковки подарков есть N кубических коробок. Самой интересной считается упаковка подарка по принципу матрёшки  — подарок упаковывается в одну из коробок, та в свою очередь в другую коробку и т. д. Одну коробку можно поместить в другую, если длина её стороны хотя бы на 3 единицы меньше длины стороны другой коробки.\nОпределите наибольшее количество коробок, которое можно использовать для упаковки одного подарка, и максимально возможную длину стороны самой маленькой коробки, где будет находиться подарок. Размер подарка позволяет поместить его в самую маленькую коробку.\nВходные данные.\nЗадание 26\nВ первой строке входного файла находится число N  — количество коробок в магазине (натуральное число, не превышающее 10 000). В следующих N строках находятся значения длин сторон коробок (все числа натуральные, не превышающие 10 000), каждое  — в отдельной строке.\nЗапишите в ответе два целых числа: сначала наибольшее количество коробок, которое можно использовать для упаковки одного подарка, затем максимально возможную длину стороны самой маленькой коробки в таком наборе.\nПример входного файла:\n5\n43\n40\n32\n40\n30\nПример входного файла приведён для пяти коробок и случая, когда минимальная допустимая разница между длинами сторон коробок, подходящих для упаковки «матрёшкой», составляет 3 единицы.\nПри таких исходных данных условию задачи удовлетворяют наборы коробок с длинами сторон 30, 40 и 43 или 32, 40 и 43 соответственно, т. е. количество коробок равно 3, а длина стороны самой маленькой коробки равна 32.","answer":"2767 51","description":"Сначала считаем в список boxes данные из файла. После этого отсортируем список в порядке убывания. В список answer сначала поместим самую большую коробку. Далее пройдём по оставшимся коробкам и будем добавлять в список answer очередную коробку, если длина её стороны будет как минимум на 3 единицы меньше последнего элемента списка answer.","python":"f = open('26.txt')\nn = f.readline()\nboxes = sorted([int(i) for i in f], reverse=True)\nanswer = [boxes[0]]\nfor box in boxes[1:]:\n    if answer[-1] - box >= 3:\n        answer.append(box)\nprint(len(answer), answer[-1])\n"},{"id":"16","text":"Системный администратор раз в неделю создаёт архив пользовательских файлов. Однако объём диска, куда он помещает архив, может быть меньше, чем суммарный объём архивируемых файлов. Известно, какой объём занимает файл каждого пользователя.\nПо заданной информации об объёме файлов пользователей и свободном объёме на архивном диске определите максимальное число пользователей, чьи файлы можно сохранить в архиве, а также максимальный размер имеющегося файла, который может быть сохранён в архиве, при условии, что сохранены файлы максимально возможного числа пользователей.\nВходные данные.\nЗадание 26\nВ первой строке входного файла находятся два числа: S  — размер свободного места на диске (натуральное число, не превышающее 10 000) и N  — количество пользователей (натуральное число, не превышающее 4000). В следующих N строках находятся значения объёмов файлов каждого пользователя (все числа натуральные, не превышающие 100), каждое в отдельной строке.\nЗапишите в ответе два числа: сначала наибольшее число пользователей, чьи файлы могут быть помещены в архив, затем максимальный размер имеющегося файла, который может быть сохранён в архиве, при условии, что сохранены файлы максимально возможного числа пользователей.\nПример входного файла:\n100 4\n80\n30\n50\n40\nПри таких исходных данных можно сохранить файлы максимум двух пользователей. Возможные объёмы этих двух файлов 30 и 40, 30 и 50 или 40 и 50. Наибольший объём файла из перечисленных пар  — 50, поэтому ответ для приведённого примера:\n2 50","answer":"666 21","description":"Сначала считаем в массив данные из файла. После этого отсортируем массив в порядке возрастания. Таким образом, последовательно складывая элементы массива с начала и сравнивая сумму с размером свободного места на диске получим максимальное количество пользователей, чьи файлы могут поместиться на диске. Далее, вычитая из найденной суммы наибольший файл в текущей последовательности, будем пробовать прибавлять файлы с большим весом. Если такой файл будет найден, то заменяем значение наибольшего файла, который возможно поместить на диск.","python":"f = open('28140.txt')\ndata = f.readlines()\ns = data[0].split()\ns = int(s[0])\ndel (data[0])  # первая строка больше не нужна, удаляем ее\nfor i in range(0, len(data)):\n    data[i] = int(data[i])\ndata = sorted(data)\nsumma = 0\nfor count in range(0, len(data)):\n    if summa + data[count] > s: break\n    summa += data[count]\nprint(count)\nzapas = s - summa\nfor i in range(0, len(data)):\n    if data[i] - data[count - 1] <= zapas:\n        itog = data[i]\nprint(itog)\n"},{"id":"17","text":"Системный администратор раз в неделю создаёт архив пользовательских файлов. Однако объём диска, куда он помещает архив, может быть меньше, чем суммарный объём архивируемых файлов. Известно, какой объём занимает файл каждого пользователя.\nПо заданной информации об объёме файлов пользователей и свободном объёме на архивном диске определите максимальное число пользователей, чьи файлы можно сохранить в архиве, а также максимальный размер имеющегося файла, который может быть сохранён в архиве, при условии, что сохранены файлы максимально возможного числа пользователей.\nВходные данные.\nЗадание 26\nВ первой строке входного файла находятся два числа: S  — размер свободного места на диске (натуральное число, не превышающее 10 000) и N  — количество пользователей (натуральное число, не превышающее 4000). В следующих N строках находятся значения объёмов файлов каждого пользователя (все числа натуральные, не превышающие 100), каждое в отдельной строке.\nЗапишите в ответе два числа: сначала наибольшее число пользователей, чьи файлы могут быть помещены в архив, затем максимальный размер имеющегося файла, который может быть сохранён в архиве, при условии, что сохранены файлы максимально возможного числа пользователей.\nПример входного файла:\n100 4\n80\n30\n50\n40\nПри таких исходных данных можно сохранить файлы максимум двух пользователей. Возможные объёмы этих двух файлов 30 и 40, 30 и 50 или 40 и 50. Наибольший объём файла из перечисленных пар  — 50, поэтому ответ для приведённого примера:\n2 50","answer":"813 35","description":"Сначала считаем в массив данные из файла. После этого отсортируем массив в порядке возрастания. Таким образом, последовательно складывая элементы массива с начала и сравнивая сумму с размером свободного места на диске получим максимальное количество пользователей, чьи файлы могут поместиться на диске. Далее, вычитая из найденной суммы наибольший файл в текущей последовательности, будем пробовать прибавлять файлы с большим весом. Если такой файл будет найден, то заменяем значение наибольшего файла, который возможно поместить на диск.","python":"f = open('27884.txt')\ndata = f.readlines()\ns = data[0].split()\ns = int(s[0])\ndel (data[0])  # первая строка больше не нужна, удаляем ее\nfor i in range(0, len(data)):\n    data[i] = int(data[i])\ndata = sorted(data)\nsumma = 0\nfor count in range(0, len(data)):\n    if summa + data[count] > s: break\n    summa += data[count]\nprint(count)\nzapas = s - summa\nfor i in range(0, len(data)):\n    if data[i] - data[count - 1] <= zapas:\n        itog = data[i]\nprint(itog)\n"},{"id":"18","text":"Организация купила для своих сотрудников все места в нескольких подряд идущих рядах на концертной площадке. Известно, какие места уже распределены между сотрудниками. Найдите ряд с наибольшим номером, в котором есть два соседних места, таких что слева и справа от них в том же ряду места уже распределены (заняты). Гарантируется, что есть хотя бы один ряд, удовлетворяющий условию. В ответе запишите два целых числа: номер ряда и наименьший номер места из найденных в этом ряду подходящих пар.\nВходные данные.\nЗадание 26\nВ первой строке входного файла находится одно число: N  — количество занятых мест (натуральное число, не превышающее 10 000). В следующих N строках находятся пары чисел: ряд и место выкупленного билета (числа не превышают 100 000).\nВ ответе запишите два целых числа: сначала максимальный номер ряда, где нашлись обозначенные в задаче места и минимальный номер места.\nПример входного файла:\n6\n50 12\n50 15\n60 157\n60 160\n60 22\n60 25\nДля данного примера ответом будет являться пара чисел 60 и 23.","answer":"8631 7311","description":"1)  Считаем все пары в двумерный массив, где первое число  — номер ряда, второе  — номер места.\na.  Номер места считаем как отрицательное значение, чтобы при сортировке места с меньшим номером (по данным из файла) были больше (в данных). Это существенно сократит поиск нужного места.\n2)  Отсортируем массив.\n3)  Найдем последний элемент в отсортированном массиве, который удовлетворяет условию.\na.  Два занятых места находятся в одном ряду.\nb.  Разница между проверяемым местом и предыдущим равна 3 (соответствует схеме «занято»-«свободно»-«свободно»-«занято»).\nc.  Так как надо определить минимальный номер свободного места, добавим к номеру найденного места 1 (соседнее справа от минимального значения в паре занятых).","python":"f = open(26.txt’)\nn = int(f.readline())\nnums = []\nfor _ in range(n):\n    pair = list(map(int, f.readline().split()))\n    pair[1] = -pair[1]\n    nums += [pair]\nnums.sort()\nr, m = 0, 0\nfor i in range(1, len(nums)):\n    if nums[i][0] == nums[i-1][0]:\n        if nums[i][1] – nums[i-1][1] == 3:\n            r = nums[i][0]\n            m = -nums[i][1] + 1\nprint(r, m)\n"},{"id":"19","text":"Предприятие производит закупку изделий A и B, на которую выделена определённая сумма денег. У поставщика есть в наличии различные модификации этих изделий по различной цене. При покупке необходимо руководствоваться следующими правилами:\n1.  Нужно купить как можно больше изделий, независимо от их типа и модификации.\n2.  Если можно разными способами купить максимальное количество изделий, нужно выбрать тот способ, при котором будет куплено как можно больше изделий A.\n3.  Если можно разными способами купить максимальное количество изделий с одинаковым количеством изделий A, нужно выбрать тот способ, при котором вся покупка будет дешевле.\nОпределите, сколько всего будет куплено изделий A и какая сумма останется неиспользованной.\nВходные данные.\nЗадание 26\nПервая строка входного файла содержит два целых числа: N  — общее количество изделий у поставщика и M  — сумма выделенных на закупку денег (в рублях). Каждая из следующих N строк содержит целое число (цена изделия в рублях) и символ (латинская буква A или B), определяющий тип изделия. Все данные в строках входного файла отделены одним пробелом.\nВ ответе запишите два целых числа: сначала количество закупленных изделий типа A, затем оставшуюся неиспользованной сумму денег.\nПример входного файла:\n6 130\n30 B\n50 B\n60 A\n20 A\n70 A\n10 B\nВ данном случае можно купить не более 4 изделий, из них не более 2 изделий A. Минимальная цена такой покупки 120 руб. (покупаем изделия 30B, 60A, 20A, 10B). Останется 10 руб. В ответе надо записать числа 2 и 10.","answer":"157 267","description":"Создадим два двумерных массива. В первый массив считаем все элементы из файла и отсортируем его по возрастанию. После этого посчитаем максимальное количество изделий, которое можем закупить на заданную сумму, последовательно прибавляя к переменной sum цену изделия в текущем элементе. Далее, в отдельный двумерный массив вынесем только оставшиеся изделия A. Далее, будем перебирать уже взятые изделия с конца, пытаясь заменить изделия B на изделия A таким образом, чтобы сумма взятых изделий не превышала заданную сумму. После этого посчитаем, сколько изделий A получилось закупить.","python":"f = open('26.txt')\nn, m = f.readline().split()\narrayAB = [[0] * 2 for i in range(916)]\narrayA = [[0] * 2 for i in range(916)]\nn = int(n)\nm = int(m)\ncount = 0\nsumi = 0\nfor i in range(n):\n    x, z = f.readline().split()\n    arrayAB[i][0] = int(x)\n    if z == 'A':\n        arrayAB[i][1] = 0\n    if z == 'B':\n        arrayAB[i][1] = 1\narrayAB.sort()\ni = 0\nwhile m > arrayAB[i][0] + sumi:\n    if (sumi + arrayAB[i][0]) < m:\n        sumi = sumi + arrayAB[i][0]\n        count += 1\n    i += 1\nx = 1\nfor i in range(count, n):\n    if arrayAB[i][1] == 0:\n        arrayA[x][0] = arrayAB[i][0]\n        arrayA[x][1] = arrayAB[i][1]\n        x += 1\nx = 1\nfor i in range(count - 1, -1, -1):\n    if arrayAB[i][1] == 1:\n        if (sumi - arrayAB[i][0] + arrayA[x][0]) > m:\n            break\n        sumi = sumi - arrayAB[i][0] + arrayA[x][0]\n        arrayAB[i][0] = arrayA[x][0]\n        arrayAB[i][1] = arrayA[x][1]\n        x += 1\ncountA = 0\nfor i in range(count):\n    if arrayAB[i][1] == 0:\n        countA = countA + 1\nprint(countA, m - sumi)\n"},{"id":"20","text":"Системный администратор раз в неделю создаёт архив пользовательских файлов. Однако объём диска, куда он помещает архив, может быть меньше, чем суммарный объём архивируемых файлов. Известно, какой объём занимает файл каждого пользователя.\nПо заданной информации об объёме файлов пользователей и свободном объёме на архивном диске определите максимальное число пользователей, чьи файлы можно сохранить в архиве, а также максимальный размер имеющегося файла, который может быть сохранён в архиве, при условии, что сохранены файлы максимально возможного числа пользователей.\nВходные данные.\nЗадание 26\nВ первой строке входного файла находятся два числа: S  — размер свободного места на диске (натуральное число, не превышающее 10 000) и N  — количество пользователей (натуральное число, не превышающее 2000). В следующих N строках находятся значения объёмов файлов каждого пользователя (все числа натуральные, не превышающие 100), каждое в отдельной строке.\nЗапишите в ответе два числа: сначала наибольшее число пользователей, чьи файлы могут быть помещены в архив, затем максимальный размер имеющегося файла, который может быть сохранён в архиве, при условии, что сохранены файлы максимально возможного числа пользователей.\nПример входного файла:\n100 4\n80\n30\n50\n40\nПри таких исходных данных можно сохранить файлы максимум двух пользователей. Возможные объёмы этих двух файлов 30 и 40, 30 и 50 или 40 и 50. Наибольший объём файла из перечисленных пар  — 50, поэтому ответ для приведённого примера:\n2 50","answer":"509 31","description":"Сначала считаем в массив данные из файла. После этого отсортируем массив в порядке возрастания. Таким образом, последовательно складывая элементы массива с начала и сравнивая сумму с размером свободного места на диске получим максимальное количество пользователей, чьи файлы могут поместиться на диске. Далее, вычитая из найденной суммы наибольший файл в текущей последовательности, будем пробовать прибавлять файлы с большим весом. Если такой файл будет найден, то заменяем значение наибольшего файла, который возможно поместить на диск.","python":"f = open('28138.txt')\ndata = f.readlines()\ns = data[0].split()\ns = int(s[0])\ndel (data[0])  # первая строка больше не нужна, удаляем ее\nfor i in range(0, len(data)):\n    data[i] = int(data[i])\ndata = sorted(data)\nsumma = 0\nfor count in range(0, len(data)):\n    if summa + data[count] > s: break\n    summa += data[count]\nprint(count)\nzapas = s - summa\nfor i in range(0, len(data)):\n    if data[i] - data[count - 1] <= zapas:\n        itog = data[i]\nprint(itog)"}]}