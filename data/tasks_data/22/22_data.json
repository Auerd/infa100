{"tasks":[{"id":"1","text":"В файле содержится информация о совокупности N вычислительных процессов, которые могут выполняться параллельно или последовательно. Будем говорить, что процесс B зависит от процесса A, если для выполнения процесса B необходимы результаты выполнения процесса A. В этом случае процессы могут выполняться только последовательно.\nИнформация о процессах представлена в файле в виде таблицы. В первой строке таблицы указан идентификатор процесса (ID), во второй строке таблицы  — время его выполнения в миллисекундах, в третьей строке перечислены с разделителем «;» ID процессов, от которых зависит данный процесс. Если процесс является независимым, то в таблице указано значение 0.\nОпределите минимальное время, через которое завершится выполнение всей совокупности процессов, при условии, что все независимые друг от друга процессы могут выполняться параллельно.","answer":"33","description":"Отсортируем данные в таблице так, чтобы все независимые процессы оказались в начале таблицы и любой процесс был расположен после всех процессов, от которых он зависит. Также в таблицу добавим столбец «Время окончания процесса» и запишем туда длительности независимых процессов.\nДалее рассчитаем время выполнения оставшихся процессов:\n \nf(3) = 4 + f(2) = 4 + 6 = 10;\nf(4) = 5 + f(3) = 5 + 10 = 15;\nf(6) = 7 + max(f(1), f(2)) = 7 + 7 = 14;\nf(7) = 6 + max(f(5), f(6)) = 6 + 14 = 20;\nf(8) = 7 + max(f(3), f(7)) = 7 + 20 = 27;\nf(9) = 5 + f(5) = 5 + 9 = 14;\nf(10) = 7 + f(9) = 7 + 14 = 21;\nf(11) = 9 + f(6) = 9 + 14 = 23;\nf(12) = 5 + f(9) = 5 + 14 = 19;\nf(14) = 8 + max(f(12), f(13)) = 8 + 19 = 27;\nf(15) = 6 + max(f(5), f(14)) = 6 + 27 = 33.\nЗадачу также можно решить с помощью программы на языке Python:","python":"def f(d):\n    if d[2] == [0]:\n        return d[1]\n    else:\n        maxx = 0\n        for i in d[2]:\n            if maxx < f(index[i - 1]):\n                maxx = f(index[i - 1])\n        return maxx + d[1]\n \nfrom csv import reader\nwith open(\"22_30.csv\") as F:\n    s = reader(F, delimiter=';', quotechar='\"')\n    next(s)\n    index = []\n    for i in s:\n        index.append([int(i[0]), int(i[1]), list(map(int, str(i[2]).split(';')))])\n    for i in range(len(index)):\n        print(i + 1, f(index[i]))\n"},{"id":"2","text":"В файле содержится информация о совокупности N вычислительных процессов, которые могут выполняться параллельно или последовательно. Будем говорить, что процесс B зависит от процесса A, если для выполнения процесса B необходимы результаты выполнения процесса A. В этом случае процессы могут выполняться только последовательно.\nИнформация о процессах представлена в файле в виде таблицы. В первой строке таблицы указан идентификатор процесса (ID), во второй строке таблицы  — время его выполнения в миллисекундах, в третьей строке перечислены с разделителем «;» ID процессов, от которых зависит данный процесс. Если процесс является независимым, то в таблице указано значение 0.\nОпределите минимальное время, через которое завершится выполнение всей совокупности процессов, при условии, что все независимые друг от друга процессы могут выполняться параллельно.","answer":"36","description":"Отсортируем данные в таблице так, чтобы все независимые процессы оказались в начале таблицы и любой процесс был расположен после всех процессов, от которых он зависит. Также в таблицу добавим столбец «Время окончания процесса» и запишем туда длительности независимых процессов.\nДалее рассчитаем время выполнения оставшихся процессов:\n \nf(3) = 8 + f(2) = 8 + 9 = 17;\nf(4) = 4 + max(f(1), f(2)) = 4 + 9 = 13;\nf(5) = 4 + max(f(3), f(4)) = 4 + 17 = 21;\nf(6) = 7 + f(4) = 7 + 13 = 20;\nf(8) = 8 + max(f(6), f(7)) = 8 + 20 = 28;\nf(9) = 9 + max(f(6), f(7)) = 9 + 20 = 29;\nf(10) = 6 + f(5) = 6 + 21 = 27;\nf(11) = 2 + max(f(9), f(10)) = 2 + 29 = 31;\nf(13) = 8 + max(f(6), f(7)) = 8 + 20 = 28;\nf(14) = 5 + f(7) = 5 + 3 = 8;\nf(15) = 8 + max(f(2), f(8)) = 8 + 28 = 36.\nЗадачу также можно решить с помощью программы на языке Python:","python":"def f(d):\n    if d[2] == [0]:\n        return d[1]\n    else:\n        maxx = 0\n        for i in d[2]:\n            if maxx < f(index[i - 1]):\n                maxx = f(index[i - 1])\n        return maxx + d[1]\n \nfrom csv import reader\nwith open(\"22_21.csv\") as F:\n    s = reader(F, delimiter=';', quotechar='\"')\n    next(s)\n    index = []\n    for i in s:\n        index.append([int(i[0]), int(i[1]), list(map(int, str(i[2]).split(';')))])\n    for i in range(len(index)):\n        print(i + 1, f(index[i]))\n"},{"id":"3","text":"В файле содержится информация о совокупности N вычислительных процессов, которые могут выполняться параллельно или последовательно. Будем говорить, что процесс B зависит от процесса A, если для выполнения процесса B необходимы результаты выполнения процесса A. В этом случае процессы могут выполняться только последовательно.\nИнформация о процессах представлена в файле в виде таблицы. В первой строке таблицы указан идентификатор процесса (ID), во второй строке таблицы  — время его выполнения в миллисекундах, в третьей строке перечислены с разделителем «;» ID процессов, от которых зависит данный процесс. Если процесс является независимым, то в таблице указано значение 0.\nОпределите минимальное время, через которое завершится выполнение всей совокупности процессов, при условии, что все независимые друг от друга процессы могут выполняться параллельно.","answer":"54","description":"Отсортируем данные в таблице так, чтобы все независимые процессы оказались в начале таблицы и любой процесс был расположен после всех процессов, от которых он зависит. Также в таблицу добавим столбец «Время окончания процесса» и запишем туда длительности независимых процессов.\nДалее рассчитаем время выполнения оставшихся процессов:\n \nf(2) = 4 + f(1) = 4 + 5 = 9;\nf(3) = 3 + max(f(1), f(2)) = 3 + 9 = 12;\nf(4) = 5 + max(f(2), f(3)) = 5 + 12 = 17;\nf(6) = 5 + max(f(4), f(5)) = 5 + 17 = 22;\nf(7) = 5 + max(f(5), f(6)) = 5 + 22 = 27;\nf(9) = 6 + max(f(7), f(8)) = 6 + 27 = 33;\nf(10) = 4 + max(f(8), f(9)) = 4 + 33 = 37;\nf(12) = 5 + max(f(10), f(11)) = 5 + 37 = 42;\nf(13) = 7 + max(f(11), f(12)) = 7 + 42 = 49;\nf(15) = 5 + max(f(13), f(14)) = 5 + 49 = 54.\nЗадачу также можно решить с помощью программы на языке Python:","python":"def f(d):\n    if d[2] == [0]:\n        return d[1]\n    else:\n        maxx = 0\n        for i in d[2]:\n            if maxx < f(index[i - 1]):\n                maxx = f(index[i - 1])\n        return maxx + d[1]\n \nfrom csv import reader\nwith open(\"22_34.csv\") as F:\n    s = reader(F, delimiter=';', quotechar='\"')\n    next(s)\n    index = []\n    for i in s:\n        index.append([int(i[0]), int(i[1]), list(map(int, str(i[2]).split(';')))])\n    for i in range(len(index)):\n        print(i + 1, f(index[i]))\n"},{"id":"4","text":"В файле содержится информация о совокупности N вычислительных процессов, которые могут выполняться параллельно или последовательно. Будем говорить, что процесс B зависит от процесса A, если для выполнения процесса B необходимы результаты выполнения процесса A. В этом случае процессы могут выполняться только последовательно.\nИнформация о процессах представлена в файле в виде таблицы. В первой строке таблицы указан идентификатор процесса (ID), во второй строке таблицы  — время его выполнения в миллисекундах, в третьей строке перечислены с разделителем «;» ID процессов, от которых зависит данный процесс. Если процесс является независимым, то в таблице указано значение 0.\nОпределите минимальное время, через которое завершится выполнение всей совокупности процессов, при условии, что все независимые друг от друга процессы могут выполняться параллельно.","answer":"33","description":"Отсортируем данные в таблице так, чтобы все независимые процессы оказались в начале таблицы и любой процесс был расположен после всех процессов, от которых он зависит. Также в таблицу добавим столбец «Время окончания процесса» и запишем туда длительности независимых процессов.\nДалее рассчитаем время выполнения оставшихся процессов:\n \nf(3) = 3 + f(2) = 3 + 9 = 12;\nf(5) = 4 + f(3) = 4 + 12 = 16;\nf(6) = 7 + f(4) = 7 + 4 = 11;\nf(8) = 9 + max(f(5), f(6)) = 9 + 16 = 25;\nf(9) = 2 + max(f(6), f(7)) = 2 + 11 = 13;\nf(10) = 6 + max(f(3), f(5)) = 6 + 16 = 22;\nf(11) = 2 + max(f(5), f(10)) = 2 + 22 = 24;\nf(13) = 8 + max(f(4), f(5)) = 8 + 16 = 24;\nf(14) = 3 + f(7) = 3 + 3 = 6;\nf(15) = 8 + max(f(2), f(8)) = 8 + 25 = 33.\nЗадачу также можно решить с помощью программы на языке Python:","python":"def f(d):\n    if d[2] == [0]:\n        return d[1]\n    else:\n        maxx = 0\n        for i in d[2]:\n            if maxx < f(index[i - 1]):\n                maxx = f(index[i - 1])\n        return maxx + d[1]\n \nfrom csv import reader\nwith open(\"22_19.csv\") as F:\n    s = reader(F, delimiter=';', quotechar='\"')\n    next(s)\n    index = []\n    for i in s:\n        index.append([int(i[0]), int(i[1]), list(map(int, str(i[2]).split(';')))])\n    for i in range(len(index)):\n        print(i + 1, f(index[i]))\n"},{"id":"5","text":"В файле содержится информация о совокупности N вычислительных процессов, которые могут выполняться параллельно или последовательно. Будем говорить, что процесс B зависит от процесса A, если для выполнения процесса B необходимы результаты выполнения процесса A. В этом случае процессы могут выполняться только последовательно.\nИнформация о процессах представлена в файле в виде таблицы. В первой строке таблицы указан идентификатор процесса (ID), во второй строке таблицы  — время его выполнения в миллисекундах, в третьей строке перечислены с разделителем «;» ID процессов, от которых зависит данный процесс. Если процесс является независимым, то в таблице указано значение 0.\nОпределите минимальное время, через которое завершится выполнение всей совокупности процессов, при условии, что все независимые друг от друга процессы могут выполняться параллельно.","answer":"28","description":"Отсортируем данные в таблице так, чтобы все независимые процессы оказались в начале таблицы и любой процесс был расположен после всех процессов, от которых он зависит. Также в таблицу добавим столбец «Время окончания процесса» и запишем туда длительности независимых процессов.\nДалее рассчитаем время выполнения оставшихся процессов:\n \nf(3) = 3 + f(2) = 3 + 9 = 12;\nf(5) = 4 + max(f(3), f(4)) = 4 + 12 = 16;\nf(6) = 7 + f(4) = 7 + 4 = 11;\nf(8) = 9 + max(f(6), f(7)) = 9 + 11 = 20;\nf(9) = 2 + max(f(6), f(7)) = 2 + 11 = 13;\nf(10) = 6 + f(5) = 6 + 16 = 22;\nf(11) = 2 + max(f(9), f(10)) = 2 + 22 = 24;\nf(13) = 8 + f(4) = 8 + 4 = 12;\nf(14) = 3 + f(7) = 3 + 3 = 6;\nf(15) = 8 + max(f(2), f(8)) = 8 + 20 = 28.\nЗадачу также можно решить с помощью программы на языке Python:","python":"def f(d):\n    if d[2] == [0]:\n        return d[1]\n    else:\n        maxx = 0\n        for i in d[2]:\n            if maxx < f(index[i - 1]):\n                maxx = f(index[i - 1])\n        return maxx + d[1]\n \nfrom csv import reader\nwith open(\"22_20.csv\") as F:\n    s = reader(F, delimiter=';', quotechar='\"')\n    next(s)\n    index = []\n    for i in s:\n        index.append([int(i[0]), int(i[1]), list(map(int, str(i[2]).split(';')))])\n    for i in range(len(index)):\n        print(i + 1, f(index[i]))\n"},{"id":"6","text":"В файле содержится информация о совокупности N вычислительных процессов, которые могут выполняться параллельно или последовательно. Будем говорить, что процесс B зависит от процесса A, если для выполнения процесса B необходимы результаты выполнения процесса A. В этом случае процессы могут выполняться только последовательно.\nИнформация о процессах представлена в файле в виде таблицы. В первой строке таблицы указан идентификатор процесса (ID), во второй строке таблицы  — время его выполнения в миллисекундах, в третьей строке перечислены с разделителем «;» ID процессов, от которых зависит данный процесс. Если процесс является независимым, то в таблице указано значение 0.\nОпределите минимальное время, через которое завершится выполнение всей совокупности процессов, при условии, что все независимые друг от друга процессы могут выполняться параллельно.","answer":"44","description":"Отсортируем данные в таблице так, чтобы все независимые процессы оказались в начале таблицы и любой процесс был расположен после всех процессов, от которых он зависит. Также в таблицу добавим столбец «Время окончания процесса» и запишем туда длительности независимых процессов.\nДалее рассчитаем время выполнения оставшихся процессов:\n \nf(2) = 9 + f(1) = 9 + 9 = 18;\nf(3) = 8 + f(2) = 8 + 18 = 26;\nf(4) = 4 + max(f(1), f(2)) = 4 + 18 = 22;\nf(5) = 4 + max(f(1), f(4)) = 4 + 22 = 26;\nf(6) = 7 + f(4) = 7 + 22 = 29;\nf(8) = 7 + max(f(3), f(5)) = 7 + 26 = 33;\nf(9) = 4 + max(f(6), f(7)) = 4 + 29 = 33;\nf(10) = 6 + max(f(8), f(9)) = 6 + 33 = 39;\nf(11) = 9 + max(f(2), f(3)) = 9 + 26 = 35;\nf(12) = 3 + max(f(8), f(9)) = 3 + 33 = 36;\nf(13) = 8 + max(f(6), f(7)) = 8 + 29 = 37;\nf(14) = 5 + max(f(8), f(10)) = 5 + 39 = 44;\nf(15) = 8 + max(f(4), f(11)) = 8 + 35 = 43.\n\nЗадачу также можно решить с помощью программы на языке Python:","python":"def f(d):\n    if d[2] == [0]:\n        return d[1]\n    else:\n        maxx = 0\n        for i in d[2]:\n            if maxx < f(index[i - 1]):\n                maxx = f(index[i - 1])\n        return maxx + d[1]\n \nfrom csv import reader\nwith open(\"22_23.csv\") as F:\n    s = reader(F, delimiter=';', quotechar='\"')\n    next(s)\n    index = []\n    for i in s:\n        index.append([int(i[0]), int(i[1]), list(map(int, str(i[2]).split(';')))])\n    for i in range(len(index)):\n        print(i + 1, f(index[i]))\n"},{"id":"7","text":"В файле содержится информация о совокупности N вычислительных процессов, которые могут выполняться параллельно или последовательно. Будем говорить, что процесс B зависит от процесса A, если для выполнения процесса B необходимы результаты выполнения процесса A. В этом случае процессы могут выполняться только последовательно.\nИнформация о процессах представлена в файле в виде таблицы. В первой строке таблицы указан идентификатор процесса (ID), во второй строке таблицы  — время его выполнения в миллисекундах, в третьей строке перечислены с разделителем «;» ID процессов, от которых зависит данный процесс. Если процесс является независимым, то в таблице указано значение 0.\nОпределите минимальное время, через которое завершится выполнение всей совокупности процессов, при условии, что все независимые друг от друга процессы могут выполняться параллельно.","answer":"23","description":"Отсортируем данные в таблице так, чтобы все независимые процессы оказались в начале таблицы и любой процесс был расположен после всех процессов, от которых он зависит. Также в таблицу добавим столбец «Время окончания процесса» и запишем туда длительности независимых процессов.\nДалее рассчитаем время выполнения оставшихся процессов:\n \nf(5) = 2 + f(3) = 2 + 3 = 5;\nf(6) = 9 + max(f(2), f(4)) = 9 + 7 = 16;\nf(7) = 5 + max(f(3), f(4)) = 5 + 7 = 12;\nf(9) = 7 + max(f(4), f(5)) = 7 + 7 = 14;\nf(10) = 2 + f(8) = 2 + 2 = 4;\nf(12) = 3 + max(f(4), f(7)) = 3 + 12 = 15;\nf(13) = 7 + max(f(3), f(6)) = 7 + 16 = 23;\nf(14) = 3 + max(f(7), f(9)) = 3 + 14 = 17;\nf(15) = 8 + max(f(10), f(11)) = 8 + 7 = 15.\nЗадачу также можно решить с помощью программы на языке Python:","python":"def f(d):\n    if d[2] == [0]:\n        return d[1]\n    else:\n        maxx = 0\n        for i in d[2]:\n            if maxx < f(index[i - 1]):\n                maxx = f(index[i - 1])\n        return maxx + d[1]\n \nfrom csv import reader\nwith open(\"22_4.csv\") as F:\n    s = reader(F, delimiter=';', quotechar='\"')\n    next(s)\n    index = []\n    for i in s:\n        index.append([int(i[0]), int(i[1]), list(map(int, str(i[2]).split(';')))])\n    for i in range(len(index)):\n        print(i + 1, f(index[i]))\n"},{"id":"8","text":"В файле содержится информация о совокупности N вычислительных процессов, которые могут выполняться параллельно или последовательно. Будем говорить, что процесс B зависит от процесса A, если для выполнения процесса B необходимы результаты выполнения процесса A. В этом случае процессы могут выполняться только последовательно.\nИнформация о процессах представлена в файле в виде таблицы. В первой строке таблицы указан идентификатор процесса (ID), во второй строке таблицы  — время его выполнения в миллисекундах, в третьей строке перечислены с разделителем «;» ID процессов, от которых зависит данный процесс. Если процесс является независимым, то в таблице указано значение 0.\nОпределите минимальное время, через которое завершится выполнение всей совокупности процессов, при условии, что все независимые друг от друга процессы могут выполняться параллельно.","answer":"27","description":"Отсортируем данные в таблице так, чтобы все независимые процессы оказались в начале таблицы и любой процесс был расположен после всех процессов, от которых он зависит. Также в таблицу добавим столбец «Время окончания процесса» и запишем туда длительности независимых процессов.\nДалее рассчитаем время выполнения оставшихся процессов:\n \nf(3) = 3 + max(f(1), f(2)) = 3 + 6 = 9;\nf(5) = 4 + max(f(1), f(3)) = 4 + 9 = 13;\nf(6) = 9 + max(f(4), f(5)) = 9 + 13 = 22;\nf(8) = 5 + f(7) = 5 + 3 = 8;\nf(9) = 2 + f(6) = 2 + 22 = 24;\nf(10) = 6 + f(8) = 6 + 8 = 14;\nf(11) = 2 + max(f(5), f(10)) = 2 + 14 = 16;\nf(14) = 3 + max(f(8), f(9)) = 3 + 24 = 27;\nf(15) = 8 + max(f(3), f(7)) = 8 + 9 = 17.\nЗадачу также можно решить с помощью программы на языке Python:","python":"def f(d):\n    if d[2] == [0]:\n        return d[1]\n    else:\n        maxx = 0\n        for i in d[2]:\n            if maxx < f(index[i - 1]):\n                maxx = f(index[i - 1])\n        return maxx + d[1]\n \nfrom csv import reader\nwith open(\"22_17.csv\") as F:\n    s = reader(F, delimiter=';', quotechar='\"')\n    next(s)\n    index = []\n    for i in s:\n        index.append([int(i[0]), int(i[1]), list(map(int, str(i[2]).split(';')))])\n    for i in range(len(index)):\n        print(i + 1, f(index[i]))\n"},{"id":"9","text":"В файле содержится информация о совокупности N вычислительных процессов, которые могут выполняться параллельно или последовательно. Будем говорить, что процесс B зависит от процесса A, если для выполнения процесса B необходимы результаты выполнения процесса A. В этом случае процессы могут выполняться только последовательно.\nИнформация о процессах представлена в файле в виде таблицы. В первой строке таблицы указан идентификатор процесса (ID), во второй строке таблицы  — время его выполнения в миллисекундах, в третьей строке перечислены с разделителем «;» ID процессов, от которых зависит данный процесс. Если процесс является независимым, то в таблице указано значение 0.\nОпределите минимальное время, через которое завершится выполнение всей совокупности процессов, при условии, что все независимые друг от друга процессы могут выполняться параллельно.","answer":"47","description":"Отсортируем данные в таблице так, чтобы все независимые процессы оказались в начале таблицы и любой процесс был расположен после всех процессов, от которых он зависит. Также в таблицу добавим столбец «Время окончания процесса» и запишем туда длительности независимых процессов.\nДалее рассчитаем время выполнения оставшихся процессов:\n \nf(3) = 8 + f(2) = 8 + 6 = 14;\nf(4) = 5 + f(3) = 5 + 14 = 19;\nf(6) = 9 + max(f(3), f(5)) = 9 + 14 = 23;\nf(7) = 6 + max(f(5), f(6)) = 6 + 23 = 29;\nf(9) = 5 + f(5) = 5 + 8 = 13;\nf(10) = 7 + f(9) = 7 + 13 = 20;\nf(11) = 5 + max(f(8), f(10)) = 5 + 20 = 25;\nf(13) = 8 + max(f(11), f(12)) = 8 + 25 = 33;\nf(14) = 6 + max(f(7), f(13)) = 6 + 33 = 39;\nf(15) = 8 + f(14) = 8 + 39 = 47.\nЗадачу также можно решить с помощью программы на языке Python:","python":"def f(d):\n    if d[2] == [0]:\n        return d[1]\n    else:\n        maxx = 0\n        for i in d[2]:\n            if maxx < f(index[i - 1]):\n                maxx = f(index[i - 1])\n        return maxx + d[1]\n \nfrom csv import reader\nwith open(\"22_28.csv\") as F:\n    s = reader(F, delimiter=';', quotechar='\"')\n    next(s)\n    index = []\n    for i in s:\n        index.append([int(i[0]), int(i[1]), list(map(int, str(i[2]).split(';')))])\n    for i in range(len(index)):\n        print(i + 1, f(index[i]))\n"},{"id":"10","text":"В файле содержится информация о совокупности N вычислительных процессов, которые могут выполняться параллельно или последовательно. Будем говорить, что процесс B зависит от процесса A, если для выполнения процесса B необходимы результаты выполнения процесса A. В этом случае процессы могут выполняться только последовательно.\nИнформация о процессах представлена в файле в виде таблицы. В первой строке таблицы указан идентификатор процесса (ID), во второй строке таблицы  — время его выполнения в миллисекундах, в третьей строке перечислены с разделителем «;» ID процессов, от которых зависит данный процесс. Если процесс является независимым, то в таблице указано значение 0.\nОпределите минимальное время, через которое завершится выполнение всей совокупности процессов, при условии, что все независимые друг от друга процессы могут выполняться параллельно.","answer":"43","description":"Отсортируем данные в таблице так, чтобы все независимые процессы оказались в начале таблицы и любой процесс был расположен после всех процессов, от которых он зависит. Также в таблицу добавим столбец «Время окончания процесса» и запишем туда длительности независимых процессов.\nДалее рассчитаем время выполнения оставшихся процессов:\n \nf(2) = 9 + f(1) = 9 + 9 = 18;\nf(3) = 8 + f(2) = 8 + 18 = 26;\nf(4) = 4 + max(f(1), f(2)) = 4 + 18 = 22;\nf(5) = 4 + max(f(3), f(4)) = 4 + 26 = 30;\nf(6) = 7 + f(4) = 7 + 22 = 29;\nf(8) = 7 + max(f(3), f(5)) = 7 + 30 = 37;\nf(9) = 4 + max(f(6), f(7)) = 4 + 29 = 33;\nf(10) = 6 + f(5) = 6 + 30 = 36;\nf(11) = 9 + max(f(2), f(3)) = 9 + 26 = 35;\nf(13) = 8 + max(f(6), f(7)) = 8 + 29 = 37;\nf(14) = 5 + max(f(8), f(10)) = 5 + 37 = 42;\nf(15) = 8 + max(f(4), f(11)) = 8 + 35 = 43.\nЗадачу также можно решить с помощью программы на языке Python:","python":"def f(d):\n    if d[2] == [0]:\n        return d[1]\n    else:\n        maxx = 0\n        for i in d[2]:\n            if maxx < f(index[i - 1]):\n                maxx = f(index[i - 1])\n        return maxx + d[1]\n \nfrom csv import reader\nwith open(\"22_22.csv\") as F:\n    s = reader(F, delimiter=';', quotechar='\"')\n    next(s)\n    index = []\n    for i in s:\n        index.append([int(i[0]), int(i[1]), list(map(int, str(i[2]).split(';')))])\n    for i in range(len(index)):\n        print(i + 1, f(index[i]))\n"},{"id":"11","text":"В файле содержится информация о совокупности N вычислительных процессов, которые могут выполняться параллельно или последовательно. Будем говорить, что процесс B зависит от процесса A, если для выполнения процесса B необходимы результаты выполнения процесса A. В этом случае процессы могут выполняться только последовательно.\nИнформация о процессах представлена в файле в виде таблицы. В первой строке таблицы указан идентификатор процесса (ID), во второй строке таблицы  — время его выполнения в миллисекундах, в третьей строке перечислены с разделителем «;» ID процессов, от которых зависит данный процесс. Если процесс является независимым, то в таблице указано значение 0.\nОпределите минимальное время, через которое завершится выполнение всей совокупности процессов, при условии, что все независимые друг от друга процессы могут выполняться параллельно.","answer":"25","description":"Отсортируем данные в таблице так, чтобы все независимые процессы оказались в начале таблицы и любой процесс был расположен после всех процессов, от которых он зависит. Также в таблицу добавим столбец «Время окончания процесса» и запишем туда длительности независимых процессов.\nДалее рассчитаем время выполнения оставшихся процессов:\n \nf(3) = 7 + max(f(1), f(2)) = 7 + 5 = 12;\nf(4) = 8 + f(3) = 8 + 12 = 20;\nf(5) = 3 + max(f(2), f(4)) = 3 + 20 = 23;\nf(7) = 3 + f(3) = 3 + 12 = 15;\nf(9) = 2 + f(5) = 2 + 23 = 25;\nf(10) = 4 + f(7) = 4 + 15 = 19;\nf(12) = 4 + f(4) = 4 + 20 = 24;\nf(13) = 2 + f(6) = 2 + 6 = 8;\nf(14) = 6 + max(f(2), f(7)) = 6 + 15 = 21;\nf(15) = 4 + max(f(4), f(6)) = 4 + 20 = 24.\nЗадачу также можно решить с помощью программы на языке Python:","python":"def f(d):\n    if d[2] == [0]:\n        return d[1]\n    else:\n        maxx = 0\n        for i in d[2]:\n            if maxx < f(index[i - 1]):\n                maxx = f(index[i - 1])\n        return maxx + d[1]\n \nfrom csv import reader\nwith open(\"22_6.csv\") as F:\n    s = reader(F, delimiter=';', quotechar='\"')\n    next(s)\n    index = []\n    for i in s:\n        index.append([int(i[0]), int(i[1]), list(map(int, str(i[2]).split(';')))])\n    for i in range(len(index)):\n        print(i + 1, f(index[i]))\n"},{"id":"12","text":"В файле содержится информация о совокупности N вычислительных процессов, которые могут выполняться параллельно или последовательно. Будем говорить, что процесс B зависит от процесса A, если для выполнения процесса B необходимы результаты выполнения процесса A. В этом случае процессы могут выполняться только последовательно.\nИнформация о процессах представлена в файле в виде таблицы. В первой строке таблицы указан идентификатор процесса (ID), во второй строке таблицы  — время его выполнения в миллисекундах, в третьей строке перечислены с разделителем «;» ID процессов, от которых зависит данный процесс. Если процесс является независимым, то в таблице указано значение 0.\nОпределите минимальное время, через которое завершится выполнение всей совокупности процессов, при условии, что все независимые друг от друга процессы могут выполняться параллельно.","answer":"22","description":"Отсортируем данные в таблице так, чтобы все независимые процессы оказались в начале таблицы и любой процесс был расположен после всех процессов, от которых он зависит. Также в таблицу добавим столбец «Время окончания процесса» и запишем туда длительности независимых процессов.\nДалее рассчитаем время выполнения оставшихся процессов:\n \nf(3) = 3 + max(f(1), f(2)) = 3 + 6 = 9;\nf(5) = 4 + max(f(2), f(4)) = 4 + 7 = 11;\nf(6) = 9 + max(f(4), f(5)) = 9 + 11 = 20;\nf(8) = 5 + f(7) = 5 + 3 = 8;\nf(9) = 2 + f(6) = 2 + 20 = 22;\nf(10) = 6 + f(4) = 6 + 7 = 13;\nf(11) = 2 + max(f(5), f(7)) = 2 + 11 = 13;\nf(14) = 3 + f(5) = 3 + 11 = 14;\nf(15) = 8 + max(f(3), f(7)) = 8 + 9 = 17.\nЗадачу также можно решить с помощью программы на языке Python:","python":"def f(d):\n    if d[2] == [0]:\n        return d[1]\n    else:\n        maxx = 0\n        for i in d[2]:\n            if maxx < f(index[i - 1]):\n                maxx = f(index[i - 1])\n        return maxx + d[1]\n \nfrom csv import reader\nwith open(\"22_16.csv\") as F:\n    s = reader(F, delimiter=';', quotechar='\"')\n    next(s)\n    index = []\n    for i in s:\n        index.append([int(i[0]), int(i[1]), list(map(int, str(i[2]).split(';')))])\n    for i in range(len(index)):\n        print(i + 1, f(index[i]))\n"},{"id":"13","text":"В файле содержится информация о совокупности N вычислительных процессов, которые могут выполняться параллельно или последовательно. Будем говорить, что процесс B зависит от процесса A, если для выполнения процесса B необходимы результаты выполнения процесса A. В этом случае процессы могут выполняться только последовательно.\nИнформация о процессах представлена в файле в виде таблицы. В первом столбце таблицы указан идентификатор процесса (ID), во втором столбце таблицы  — время его выполнения в миллисекундах, в третьем столбце перечислены с разделителем «;» ID процессов, от которых зависит данный процесс. Если процесс является независимым, то в таблице указано значение 0.\nОпределите минимальное время, через которое завершится выполнение всей совокупности процессов, при условии, что все независимые друг от друга процессы могут выполняться параллельно.","answer":"17","description":"Используя данные из файла, составим таблицу, на какой мс может закончится каждый из процессов. Процессы с ID «1», «2», «9» и «10» независимые, поэтому их выполнение закончится на 4, 3, 7 и 8 мс соответственно. Процесс с ID «3» может выполняться только после завершения процессов с ID «1» и «2», поэтому он может завершиться на 5 мс. Процессы с ID «4» и «5» зависят от процесса с ID «3», значит, они завершатся через 5 + 7  =  12 мс и 5 + 6  =  11 мс соответственно. Процесс с ID «6» зависит от процесса с ID «5», значит, он завершится через 11 + 3  =  14 мс. Процесс с ID «7» зависит от процессов с ID «4» и «6», следовательно, поскольку процесс с ID «6» завершится только на 14 мс, процесс с ID «7» выполнится на 14 + 1  =  15 мс. Процесс с ID «8» зависит от процесса с ID «7», значит, он выполнится на 15 + 2  =  17 мс. Процесс с ID «11» зависит от процесса с ID «9», поэтому он выполнится на 7 + 6  =  13 мс. Процесс с ID «12» зависит от процесса с ID «10», поэтому он выполнится на 8 + 6  =  14 мс.\nТаким образом, вся совокупность процессов завершится на 17 мс.","python":"нет\n"},{"id":"14","text":"В файле содержится информация о совокупности N вычислительных процессов, которые могут выполняться параллельно или последовательно. Будем говорить, что процесс B зависит от процесса A, если для выполнения процесса B необходимы результаты выполнения процесса A. В этом случае процессы могут выполняться только последовательно.\nИнформация о процессах представлена в файле в виде таблицы. В первой строке таблицы указан идентификатор процесса (ID), во второй строке таблицы  — время его выполнения в миллисекундах, в третьей строке перечислены с разделителем «;» ID процессов, от которых зависит данный процесс. Если процесс является независимым, то в таблице указано значение 0.\nОпределите минимальное время, через которое завершится выполнение всей совокупности процессов, при условии, что все независимые друг от друга процессы могут выполняться параллельно.","answer":"27","description":"Отсортируем данные в таблице так, чтобы все независимые процессы оказались в начале таблицы и любой процесс был расположен после всех процессов, от которых он зависит. Также в таблицу добавим столбец «Время окончания процесса» и запишем туда длительности независимых процессов.\nДалее рассчитаем время выполнения оставшихся процессов:\n \nf(3) = 3 + max(f(1), f(2)) = 3 + 6 = 9;\nf(5) = 4 + f(3) = 4 + 9 = 13;\nf(6) = 9 + max(f(4), f(5)) = 9 + 13 = 22;\nf(8) = 5 + max(f(5), f(6)) = 5 + 22 = 27;\nf(9) = 2 + f(6) = 2 + 22 = 24;\nf(10) = 6 + max(f(3), f(5)) = 6 + 13 = 19;\nf(11) = 2 + max(f(5), f(10)) = 2 + 19 = 21;\nf(14) = 3 + f(7) = 3 + 3 = 6;\nf(15) = 8 + max(f(3), f(7)) = 8 + 9 = 17.\nЗадачу также можно решить с помощью программы на языке Python:","python":"def f(d):\n    if d[2] == [0]:\n        return d[1]\n    else:\n        maxx = 0\n        for i in d[2]:\n            if maxx < f(index[i - 1]):\n                maxx = f(index[i - 1])\n        return maxx + d[1]\n \nfrom csv import reader\nwith open(\"22_18.csv\") as F:\n    s = reader(F, delimiter=';', quotechar='\"')\n    next(s)\n    index = []\n    for i in s:\n        index.append([int(i[0]), int(i[1]), list(map(int, str(i[2]).split(';')))])\n    for i in range(len(index)):\n        print(i + 1, f(index[i]))\n"},{"id":"15","text":"В файле содержится информация о совокупности N вычислительных процессов, которые могут выполняться параллельно или последовательно. Будем говорить, что процесс B зависит от процесса A, если для выполнения процесса B необходимы результаты выполнения процесса A. В этом случае процессы могут выполняться только последовательно.\nИнформация о процессах представлена в файле в виде таблицы. В первой строке таблицы указан идентификатор процесса (ID), во второй строке таблицы  — время его выполнения в миллисекундах, в третьей строке перечислены с разделителем «;» ID процессов, от которых зависит данный процесс. Если процесс является независимым, то в таблице указано значение 0.\nОпределите минимальное время, через которое завершится выполнение всей совокупности процессов, при условии, что все независимые друг от друга процессы могут выполняться параллельно.","answer":"36","description":"Отсортируем данные в таблице так, чтобы все независимые процессы оказались в начале таблицы и любой процесс был расположен после всех процессов, от которых он зависит. Также в таблицу добавим столбец «Время окончания процесса» и запишем туда длительности независимых процессов.\nДалее рассчитаем время выполнения оставшихся процессов:\n \nf(2) = 6 + f(1) = 6 + 9 = 15;\nf(3) = 6 + f(2) = 6 + 15 = 21;\nf(6) = 7 + max(f(1), f(2)) = 7 + 15 = 22;\nf(7) = 9 + f(6) = 9 + 22 = 31;\nf(9) = 5 + f(5) = 5 + 9 = 14;\nf(10) = 3 + max(f(1), f(9)) = 3 + 14 = 17;\nf(11) = 9 + f(6) = 9 + 22 = 31;\nf(12) = 5 + max(f(7), f(8)) = 5 + 31 = 36;\nf(13) = 3 + f(5) = 3 + 9 = 12;\nf(14) = 8 + max(f(5), f(9)) = 8 + 14 = 22.\nЗадачу также можно решить с помощью программы на языке Python:","python":"def f(d):\n    if d[2] == [0]:\n        return d[1]\n    else:\n        maxx = 0\n        for i in d[2]:\n            if maxx < f(index[i - 1]):\n                maxx = f(index[i - 1])\n        return maxx + d[1]\n \nfrom csv import reader\nwith open(\"22_32.csv\") as F:\n    s = reader(F, delimiter=';', quotechar='\"')\n    next(s)\n    index = []\n    for i in s:\n        index.append([int(i[0]), int(i[1]), list(map(int, str(i[2]).split(';')))])\n    for i in range(len(index)):\n        print(i + 1, f(index[i]))\n"},{"id":"16","text":"В файле содержится информация о совокупности N вычислительных процессов, которые могут выполняться параллельно или последовательно. Будем говорить, что процесс B зависит от процесса A, если для выполнения процесса B необходимы результаты выполнения процесса A. В этом случае процессы могут выполняться только последовательно.\nИнформация о процессах представлена в файле в виде таблицы. В первой строке таблицы указан идентификатор процесса (ID), во второй строке таблицы  — время его выполнения в миллисекундах, в третьей строке перечислены с разделителем «;» ID процессов, от которых зависит данный процесс. Если процесс является независимым, то в таблице указано значение 0.\nОпределите минимальное время, через которое завершится выполнение всей совокупности процессов, при условии, что все независимые друг от друга процессы могут выполняться параллельно.","answer":"35","description":"Отсортируем данные в таблице так, чтобы все независимые процессы оказались в начале таблицы и любой процесс был расположен после всех процессов, от которых он зависит. Также в таблицу добавим столбец «Время окончания процесса» и запишем туда длительности независимых процессов.\nДалее рассчитаем время выполнения оставшихся процессов:\n \nf(2) = 6 + f(1) = 6 + 1 = 7;\nf(3) = 8 + f(2) = 8 + 7 = 15;\nf(4) = 4 + max(f(1), f(2)) = 4 + 7 = 11;\nf(5) = 4 + max(f(2), f(4)) = 4 + 11 = 15;\nf(6) = 9 + f(3) = 9 + 15 = 24;\nf(7) = 3 + max(f(1), f(6)) = 3 + 24 = 27;\nf(8) = 7 + max(f(3), f(5)) = 7 + 15 = 22;\nf(9) = 5 + max(f(5), f(8)) = 5 + 22 = 27;\nf(11) = 9 + max(f(1), f(5)) = 9 + 15 = 24;\nf(13) = 8 + max(f(9), f(12)) = 8 + 27 = 35;\nf(14) = 3 + f(8) = 3 + 22 = 25;\nf(15) = 8 + max(f(5), f(9)) = 8 + 27 = 35.\nЗадачу также можно решить с помощью программы на языке Python:","python":"def f(d):\n    if d[2] == [0]:\n        return d[1]\n    else:\n        maxx = 0\n        for i in d[2]:\n            if maxx < f(index[i - 1]):\n                maxx = f(index[i - 1])\n        return maxx + d[1]\n \nfrom csv import reader\nwith open(\"22_25.csv\") as F:\n    s = reader(F, delimiter=';', quotechar='\"')\n    next(s)\n    index = []\n    for i in s:\n        index.append([int(i[0]), int(i[1]), list(map(int, str(i[2]).split(';')))])\n    for i in range(len(index)):\n        print(i + 1, f(index[i]))\n"},{"id":"17","text":"В файле содержится информация о совокупности N вычислительных процессов, которые могут выполняться параллельно или последовательно. Будем говорить, что процесс B зависит от процесса A, если для выполнения процесса B необходимы результаты выполнения процесса A. В этом случае процессы могут выполняться только последовательно.\nИнформация о процессах представлена в файле в виде таблицы. В первой строке таблицы указан идентификатор процесса (ID), во второй строке таблицы  — время его выполнения в миллисекундах, в третьей строке перечислены с разделителем «;» ID процессов, от которых зависит данный процесс. Если процесс является независимым, то в таблице указано значение 0.\nОпределите минимальное время, через которое завершится выполнение всей совокупности процессов, при условии, что все независимые друг от друга процессы могут выполняться параллельно.","answer":"54","description":"Отсортируем данные в таблице так, чтобы все независимые процессы оказались в начале таблицы и любой процесс был расположен после всех процессов, от которых он зависит. Также в таблицу добавим столбец «Время окончания процесса» и запишем туда длительности независимых процессов.\nДалее рассчитаем время выполнения оставшихся процессов:\n \nf(2) = 4 + f(1) = 4 + 7 = 11;\nf(3) = 3 + max(f(1), f(2)) = 3 + 11 = 14;\nf(4) = 5 + max(f(2), f(3)) = 5 + 14 = 19;\nf(6) = 5 + max(f(1), f(2)) = 5 + 11 = 16;\nf(7) = 5 + max(f(3), f(4)) = 5 + 19 = 24;\nf(8) = 9 + max(f(4), f(5)) = 9 + 19 = 28;\nf(9) = 5 + max(f(7), f(8)) = 5 + 28 = 33;\nf(10) = 8 + max(f(3), f(7)) = 8 + 24 = 32;\nf(12) = 6 + max(f(9), f(10)) = 6 + 33 = 39;\nf(14) = 9 + max(f(6), f(12)) = 9 + 39 = 48;\nf(15) = 6 + max(f(8), f(14)) = 6 + 48 = 54.\nЗадачу также можно решить с помощью программы на языке Python:","python":"def f(d):\n    if d[2] == [0]:\n        return d[1]\n    else:\n        maxx = 0\n        for i in d[2]:\n            if maxx < f(index[i - 1]):\n                maxx = f(index[i - 1])\n        return maxx + d[1]\n \nfrom csv import reader\nwith open(\"22_35.csv\") as F:\n    s = reader(F, delimiter=';', quotechar='\"')\n    next(s)\n    index = []\n    for i in s:\n        index.append([int(i[0]), int(i[1]), list(map(int, str(i[2]).split(';')))])\n    for i in range(len(index)):\n        print(i + 1, f(index[i]))\n"},{"id":"18","text":"В файле содержится информация о совокупности N вычислительных процессов, которые могут выполняться параллельно или последовательно. Будем говорить, что процесс B зависит от процесса A, если для выполнения процесса B необходимы результаты выполнения процесса A. В этом случае процессы могут выполняться только последовательно.\nИнформация о процессах представлена в файле в виде таблицы. В первой строке таблицы указан идентификатор процесса (ID), во второй строке таблицы  — время его выполнения в миллисекундах, в третьей строке перечислены с разделителем «;» ID процессов, от которых зависит данный процесс. Если процесс является независимым, то в таблице указано значение 0.\nОпределите минимальное время, через которое завершится выполнение всей совокупности процессов, при условии, что все независимые друг от друга процессы могут выполняться параллельно.","answer":"23","description":"Отсортируем данные в таблице так, чтобы все независимые процессы оказались в начале таблицы и любой процесс был расположен после всех процессов, от которых он зависит. Также в таблицу добавим столбец «Время окончания процесса» и запишем туда длительности независимых процессов.\nДалее рассчитаем время выполнения оставшихся процессов:\n \nf(3) = 3 + f(1) = 3 + 4 = 7;\nf(4) = 2 + f(2) = 2 + 6 = 8;\nf(6) = 8 + max(f(4), f(5)) = 8 + 8 = 16;\nf(7) = 3 + f(2) = 3 + 6 = 9;\nf(9) = 5 + f(5) = 5 + 6 = 11;\nf(10) = 7 + f(6) = 7 + 16 = 23;\nf(12) = 6 + f(8) = 6 + 2 = 8;\nf(13) = 2 + max(f(4), f(5)) = 2 + 8 = 10;\nf(14) = 7 + max(f(4), f(8)) = 7 + 8 = 15;\nf(15) = 2 + f(9) = 2 + 11 = 13.\nЗадачу также можно решить с помощью программы на языке Python:","python":"def f(d):\n    if d[2] == [0]:\n        return d[1]\n    else:\n        maxx = 0\n        for i in d[2]:\n            if maxx < f(index[i - 1]):\n                maxx = f(index[i - 1])\n        return maxx + d[1]\n \nfrom csv import reader\nwith open(\"22_9.csv\") as F:\n    s = reader(F, delimiter=';', quotechar='\"')\n    next(s)\n    index = []\n    for i in s:\n        index.append([int(i[0]), int(i[1]), list(map(int, str(i[2]).split(';')))])\n    for i in range(len(index)):\n        print(i + 1, f(index[i]))\n"},{"id":"19","text":"В файле содержится информация о совокупности N вычислительных процессов, которые могут выполняться параллельно или последовательно. Будем говорить, что процесс B зависит от процесса A, если для выполнения процесса B необходимы результаты выполнения процесса A. В этом случае процессы могут выполняться только последовательно.\nИнформация о процессах представлена в файле в виде таблицы. В первой строке таблицы указан идентификатор процесса (ID), во второй строке таблицы  — время его выполнения в миллисекундах, в третьей строке перечислены с разделителем «;» ID процессов, от которых зависит данный процесс. Если процесс является независимым, то в таблице указано значение 0.\nОпределите минимальное время, через которое завершится выполнение всей совокупности процессов, при условии, что все независимые друг от друга процессы могут выполняться параллельно.","answer":"20","description":"Отсортируем данные в таблице так, чтобы все независимые процессы оказались в начале таблицы и любой процесс был расположен после всех процессов, от которых он зависит. Также в таблицу добавим столбец «Время окончания процесса» и запишем туда длительности независимых процессов.\nДалее рассчитаем время выполнения оставшихся процессов:\n \nf(5) = 7 + f(4) = 7 + 5 = 12;\nf(6) = 2 + f(3) = 2 + 2 = 4;\nf(7) = 3 + f(5) = 3 + 12 = 15;\nf(8) = 1 + max(f(4), f(5)) = 1 + 12 = 13;\nf(10) = 5 + f(3) = 5 + 2 = 7;\nf(11) = 1 + max(f(6), f(7)) = 1 + 15 = 16;\nf(12) = 7 + max(f(3), f(8)) = 7 + 13 = 20;\nf(13) = 3 + max(f(2), f(4)) = 3 + 5 = 8;\nf(14) = 2 + max(f(1), f(2)) = 2 + 5 = 7;\nf(15) = 4 + max(f(9), f(11)) = 4 + 16 = 20.\nЗадачу также можно решить с помощью программы на языке Python:","python":"def f(d):\n    if d[2] == [0]:\n        return d[1]\n    else:\n        maxx = 0\n        for i in d[2]:\n            if maxx < f(index[i - 1]):\n                maxx = f(index[i - 1])\n        return maxx + d[1]\n \nfrom csv import reader\nwith open(\"22_11.csv\") as F:\n    s = reader(F, delimiter=';', quotechar='\"')\n    next(s)\n    index = []\n    for i in s:\n        index.append([int(i[0]), int(i[1]), list(map(int, str(i[2]).split(';')))])\n    for i in range(len(index)):\n        print(i + 1, f(index[i]))\n"},{"id":"20","text":"В файле содержится информация о совокупности N вычислительных процессов, которые могут выполняться параллельно или последовательно. Будем говорить, что процесс B зависит от процесса A, если для выполнения процесса B необходимы результаты выполнения процесса A. В этом случае процессы могут выполняться только последовательно.\nИнформация о процессах представлена в файле в виде таблицы. В первой строке таблицы указан идентификатор процесса (ID), во второй строке таблицы  — время его выполнения в миллисекундах, в третьей строке перечислены с разделителем «;» ID процессов, от которых зависит данный процесс. Если процесс является независимым, то в таблице указано значение 0.\nОпределите минимальное время, через которое завершится выполнение всей совокупности процессов, при условии, что все независимые друг от друга процессы могут выполняться параллельно.","answer":"29","description":"Отсортируем данные в таблице так, чтобы все независимые процессы оказались в начале таблицы и любой процесс был расположен после всех процессов, от которых он зависит. Также в таблицу добавим столбец «Время окончания процесса» и запишем туда длительности независимых процессов.\nДалее рассчитаем время выполнения оставшихся процессов:\n \nf(3) = 8 + max(f(1), f(2)) = 8 + 5 = 13;\nf(4) = 2 + f(3) = 2 + 13 = 15;\nf(5) = 12 + f(2) = 12 + 5 = 17;\nf(7) = 7 + max(f(3), f(4)) = 7 + 15 = 22;\nf(8) = 3 + max(f(2), f(3)) = 3 + 13 = 16;\nf(10) = 3 + max(f(5), f(6)) = 3 + 17 = 20;\nf(11) = 2 + max(f(3), f(6)) = 2 + 13 = 15;\nf(12) = 7 + max(f(2), f(7)) = 7 + 22 = 29;\nf(14) = 4 + max(f(6), f(9)) = 4 + 8 = 12;\nf(15) = 11 + f(3) = 11 + 13 = 24.\nЗадачу также можно решить с помощью программы на языке Python:","python":"def f(d):\n    if d[2] == [0]:\n        return d[1]\n    else:\n        maxx = 0\n        for i in d[2]:\n            if maxx < f(index[i - 1]):\n                maxx = f(index[i - 1])\n        return maxx + d[1]\n \nfrom csv import reader\nwith open(\"22_14.csv\") as F:\n    s = reader(F, delimiter=';', quotechar='\"')\n    next(s)\n    index = []\n    for i in s:\n        index.append([int(i[0]), int(i[1]), list(map(int, str(i[2]).split(';')))])\n    for i in range(len(index)):\n        print(i + 1, f(index[i]))"}]}