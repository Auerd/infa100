{"tasks":[{"id":"1","text":"Текстовый файл содержит только заглавные буквы латинского алфавита (ABC…Z). Определите количество групп из идущих подряд не менее 12 символов, которые начинаются и заканчиваются буквой E и не содержат других букв E (кроме первой и последней) и букв F.\nДля выполнения этого задания следует написать программу. Ниже приведён файл, который необходимо обработать с помощью данного алгоритма.","answer":"9655","description":"Для решения задачи считаем строку из данного файла. С помощью метода string.ToWords разобьём строку с разделителем «E». После этого будем последовательно проверять длину каждой получившейся строки. Если длина получившейся строки больше или равна 10 (поскольку не учитываем первую и последнюю буквы «E») и строка не содержит буквы «F», будем увеличивать счётчик groups на единицу.","python":"with open('24.txt') as f:\n    s = f.readline()\n    s = s.split('E')\n    ans = list(filter(lambda x: (not 'F' in x) and len(x) >= 10, s[1:-1]))\n    print(len(ans))\n"},{"id":"2","text":"Текстовый файл состоит не более чем из 106 символов L, D и R. Определите максимальную длину цепочки вида LDRLDRLDR... (составленной из фрагментов LDR, последний фрагмент может быть неполным).\nДля выполнения этого задания следует написать программу. Ниже приведён файл, который необходимо обработать с помощью данного алгоритма.","answer":"15","description":"Для решения данной задачи будем посимвольно считывать текстовый файл. Объявим переменные: s  — строка для работы с символами из файла, maxCount  — максимальная длина последовательности, count  — временное хранение длины последовательности, i  — переменная для перебора всех символов. Алгоритм будет сравнивать значения на трех позициях, если символы будут удовлетворять нужным условиям, то значение счетчика будет увеличиваться на 1.","python":"f = open('24.txt').readline()\nk = m = 0\nfor i in range(len(f)):\n    if (f[i] == 'L' and k%3 == 0) or (f[i] == 'D' and k%3 == 1) or (f[i] == 'R' and k%3 == 2):\n        k += 1\n        m = max(m, k)\n    elif f[i] == 'L': k = 1\n    else: k = 0\nprint(m)\n"},{"id":"3","text":"Текстовый файл содержит только заглавные буквы латинского алфавита (ABC…Z). Определите символ, который чаще всего встречается в файле между двумя одинаковыми символами.\nНапример, в тексте CBCABABACCC есть комбинации CBC, ABA (два раза), BAB и CCC. Чаще всего  — 3 раза  — между двумя одинаковыми символами стоит B, в ответе для этого случая надо написать B.\nДля выполнения этого задания следует написать программу. Ниже приведён файл, который необходимо обработать с помощью данного алгоритма.","answer":"D","description":"Для решения этой задачи считаем строку из файла. Инициализируем строковую переменную s1 со значением «ABCDEFGHIJKLMNOPQRSTUVWXYZ». Посимвольно перебирая строку из файла, каждый раз проверяя, равен ли текущий символ символу, следующему через один после текущего, и, если условие выполняется, будем вставлять в строку s1 символ, идущий между двумя одинаковыми буквами в считанной строке, таким образом, чтобы в строке s1 соответствующие символы стояли рядом друг с другом (например, если из файла была считана строка «ABAABA», строка s1 после выполнения алгоритма будет выглядеть так: «ABBBCDEFGHIJKLMNOPQRSTUVWXYZ». После этого посчитаем длину самой длинной цепочки символов и таким образом получим ответ.","python":"var\narr: array ['A'..'Z'] of integer;\ni, max: integer;\nj, res: char;\nstr: string;\nf: text;\nbegin\n    assign(f, 'C:\\24.txt');\n    reset(f);\n    readln(f, str);\n    for i:= 1 to str.Length - 2 do begin\n        if (str[i] <> str[i + 2]) then continue;\n        inc(arr[str[i + 1]]);\n    end;\n    for j:= 'A' to 'Z' do begin\n        if (arr[j] > max) then begin\n            max:= arr[j];\n            res:= j;\n        end;\n    end;\n    writeln(res);\nend.\n"},{"id":"4","text":"Текстовый файл состоит не более чем из 106 символов L, D и R. Определите максимальное количество идущих подряд символов, среди которых каждые два соседних различны.\nДля выполнения этого задания следует написать программу. Ниже приведён файл, который необходимо обработать с помощью данного алгоритма.","answer":"45","description":"Для решения данной задачи будем посимвольно считывать текстовый файл. Объявим переменные: maxLen  — максимальная длина последовательности, curLen  — временное хранение длины последовательности, i  — переменная для перебора всех символов, s  — строка для работы с символами из файла. Алгоритм будет сравнивать значение текущего символа со значением предыдущего, если символы будут удовлетворять нужным условиям, то значение счетчика будет увеличиваться на 1.","python":"f = open('24.txt').readline()\nk = 1\nm = 0\nfor i in range(1, len(f)):\n    if f[i] != f[i-1]:\n        k += 1\n    else:\n        m = max(m, k)\n        k = 1\nprint(m)\n"},{"id":"5","text":"Текстовый файл состоит не более чем из 106 символов L, D и R. Определите длину самой длинной последовательности, состоящей из символов R. Хотя бы один символ R находится в последовательности.\nДля выполнения этого задания следует написать программу. Ниже приведён файл, который необходимо обработать с помощью данного алгоритма.","answer":"1","description":"Для решения данной задачи будем посимвольно считывать текстовый файл. Объявим переменные: maxLen  — максимальная длина последовательности, curLen  — временное хранение длины последовательности, i  — переменная для перебора всех символов, s  — строка для работы с символами из файла. Алгоритм будет сравнивать значение текущего символа со значением предыдущего и, если символы не будут различаться и будут являться буквой R, то значение счетчика будет увеличиваться на 1.","python":"f = open('24.txt').readline()\nk = 1\nm = 1\nfor i in range(len(f)-1):\n    if f[i] == 'R' and f[i+1] == 'R':\n        k += 1\n        m = max(m, k)\n    else: k = 1\nprint(m)\n"},{"id":"6","text":"Текстовый файл содержит строки различной длины. Общий объём файла не превышает 1 Мбайт. Строки содержат только заглавные буквы латинского алфавита (ABC…Z).\nНеобходимо найти строку, содержащую наименьшее количество букв G (если таких строк несколько, надо взять ту, которая находится в файле раньше), и определить, какая буква встречается в этой строке чаще всего. Если таких букв несколько, надо взять ту, которая позже стоит в алфавите.\nПример. Исходный файл:\nGIGA\nGABLAB\nAGAAA\nВ этом примере в первой строке две буквы G, во второй и третьей  — по одной. Берём вторую строку, т. к. она находится в файле раньше. В этой строке чаще других встречаются буквы A и B (по два раза), выбираем букву B, т. к. она позже стоит в алфавите. В ответе для этого примера надо записать B.\nДля выполнения этого задания следует написать программу. Ниже приведён файл, который необходимо обработать с помощью данного алгоритма.","answer":"T","description":"Для решения этой задачи объявим массив arr, в котором будем считать количество каждого символа в строке, переменную min, в которой будем хранить минимальное найденное количество символов G в какой-либо строке, переменную countG, в которую будем записывать количество символов G в очередной считанной строке. Последовательно считывая строки, будем считать в них количество символов G и записывать это количество в переменную countG. Также будем считать в очередной считанной строке количество каждого отдельного символа с помощью массива arr. Если значение переменной countG окажется меньше текущего значения переменной min, будем находить максимальное значение элемента массива arr и символ, соответствующий этому значению. Если в строке будет встречено одинаковое количество двух разных символов, необходимо в переменную res записать тот символ, который согласно алфавиту идёт позже. Для этого при поиске максимального значения элемента массива используем условие «maxC <= arr[j]».","python":"file = open(\"24.txt\", \"r\")\na = [10**6]*91\nfor i in range(1000):\n    st = file.readline()\n    d = [0]*91\n    for j in range(len(st)):\n        d[ord(st[j])] += 1\n    if d[71] < a[71]:\n        for k in range(len(d)):\n            a[k] = d[k]\nmx = 0\nfor i in range(len(a)):\n    if a[i] >= mx:\n        mx = a[i]\n        mxchar = chr(i)\nprint(mxchar)\n"},{"id":"7","text":"Текстовый файл состоит не более чем из 106 символов L, D и R. Определите длину самой длинной последовательности, состоящей из символов D. Хотя бы один символ D находится в последовательности.\nДля выполнения этого задания следует написать программу. Ниже приведён файл, который необходимо обработать с помощью данного алгоритма.","answer":"11","description":"Для решения данной задачи будем посимвольно считывать текстовый файл. Объявим переменные: maxLen  — максимальная длина последовательности, curLen  — временное хранение длины последовательности, i  — переменная для перебора всех символов, s  — строка для работы с символами из файла. Алгоритм будет сравнивать значение текущего символа со значением предыдущего и, если символы не будут различаться и будут являться буквой D, то значение счетчика будет увеличиваться на 1.","python":"f = open('24.txt').readline()\nk = 1\nm = 0\nfor i in range(len(f)-1):\n    if f[i] == 'D' and f[i+1] == 'D':\n        k += 1\n        m = max(m, k)\n    else: k = 1\nprint(m)\n"},{"id":"8","text":"Текстовый файл состоит не более чем из 106 символов A, B и C. Определите максимальное количество идущих подряд символов C.\nДля выполнения этого задания следует написать программу. Ниже приведён файл, который необходимо обработать с помощью данного алгоритма.","answer":"1","description":"Для решения данной задачи будем посимвольно считывать текстовый файл. Объявим переменные: maxLen  — максимальная длина последовательности, curLen  — временное хранение длины последовательности, i  — переменная для перебора всех символов, s  — строка для работы с символами из файла. Алгоритм будет сравнивать значение текущего символа со значением предыдущего, если символы будут удовлетворять нужным условиям, то значение счетчика будет увеличиваться на 1.","python":"f = open('24.txt').readline()\nk = 1\nm = 1\nfor i in range(len(f)-1):\n    if f[i] == 'C' and f[i+1] == 'C':\n        k += 1\n        m = max(m, k)\n    else: k = 1\nprint(m)\n"},{"id":"9","text":"Текстовый файл содержит только заглавные буквы латинского алфавита (ABC...Z). Определите максимальное количество идущих подряд символов, среди которых нет ни одной буквы E и при этом не менее трёх букв A.\nДля выполнения этого задания следует написать программу. Ниже приведён файл, который необходимо обработать с помощью данного алгоритма.","answer":"275","description":"Для решения данной задачи будем посимвольно считывать текстовый файл. Объявим переменную c, которая будет хранить очередной считанный символ. Далее объявим переменную countA, в которой будем хранить число символов «A» в текущей последовательности. Также объявим переменные k и max. Первая нужна для определения длины каждой последовательности символов, среди которых нет символов «E», вторая  — для хранения максимальной длины такой последовательности. Если будет встречен символ «E» и переменная countA будет больше двух, будет сравниваться текущая длина последовательности со значением в переменной max. Если текущая длина больше, переменная max перезаписывается.","python":"f=open('24.txt')\nN=f.readline()\nq= 0\nt= []\nr=[]\nfor y in range(len(N)):\n    t=[]\n    while N[y]!='E' and y < (len(N)-1):\n        t.append(N[y])\n        if N[y]=='A':\n            q+=1\n        y+=1\n    if q >=3 and (len(t))>(len(r)):\n        r=t\n    q=0\nprint(len(r))\n"},{"id":"10","text":"Текстовый файл содержит строки различной длины. Общий объём файла не превышает 1 Мбайт. Строки содержат только заглавные буквы латинского алфавита (ABC…Z).\nНеобходимо найти строку, содержащую наименьшее количество букв N (если таких строк несколько, надо взять ту, которая находится в файле раньше), и определить, какая буква встречается в этой строке чаще всего. Если таких букв несколько, надо взять ту, которая позже стоит в алфавите.\nПример. Исходный файл:\nNINA\nNABLAB\nANAAA\nВ этом примере в первой строке две буквы N, во второй и третьей  — по одной. Берём вторую строку, т. к. она находится в файле раньше. В этой строке чаще других встречаются буквы A и B (по два раза), выбираем букву B, т. к. она позже стоит в алфавите. В ответе для этого примера надо записать B.\nДля выполнения этого задания следует написать программу. Ниже приведён файл, который необходимо обработать с помощью данного алгоритма.","answer":"Y","description":"Для решения этой задачи объявим массив arr, в котором будем считать количество каждого символа в строке, переменную min, в которой будем хранить минимальное найденное количество символов N в какой-либо строке, переменную countN, в которую будем записывать количество символов N в очередной считанной строке. Последовательно считывая строки, будем считать в них количество символов N и записывать это количество в переменную countN. Также будем считать в очередной считанной строке количество каждого отдельного символа с помощью массива arr. Если значение переменной countN окажется меньше текущего значения переменной min, будем находить максимальное значение элемента массива arr и символ, соответствующий этому значению. Если в строке будет встречено одинаковое количество двух разных символов, необходимо в переменную res записать тот символ, который согласно алфавиту идёт позже. Для этого при поиске максимального значения элемента массива используем условие «maxC <= arr[j]».","python":"f = open(\"24(3).txt\")\ns = f.readlines()\na = [0] * 26\nmin = 100000000\nmaxi = 0\nfor i in range(len(s)):\n    str = s[i]\n    if str.count('N') < min:\n        min = str.count('N')\n        s1 = str\nfor i in range(len(s1) - 1):\n    a[ord(s1[i]) - 65] += 1\nfor i in range(26):\n    if a[i] >= maxi:\n        maxi = a[i]\n        index = i\nprint(сhr(index + 65))\n"},{"id":"11","text":"Текстовый файл состоит не более чем из 106 символов X, Y и Z. Определите максимальную длину цепочки вида XYZXYZXYZ... (составленной из фрагментов XYZ, последний фрагмент может быть неполным).\nДля выполнения этого задания следует написать программу. Ниже приведён файл, который необходимо обработать с помощью данного алгоритма.","answer":"13","description":"Для решения данной задачи будем посимвольно считывать текстовый файл. Объявим переменные: s  — строка для работы с символами из файла, maxCount  — максимальная длина последовательности, count  — временное хранение длины последовательности, i  — переменная для перебора всех символов. Алгоритм будет сравнивать значения на трех позициях, если символы будут удовлетворять нужным условиям, то значение счетчика будет увеличиваться на 1.","python":"f = open('24.txt').readline()\nk = m = 0\nfor i in range(len(f)):\n    if (f[i] == 'X' and k%3 == 0) or (f[i] == 'Y' and k%3 == 1) or (f[i] == 'Z' and k%3 == 2):\n        k += 1\n        m = max(m, k)\n    elif f[i] == 'X': k = 1\n    else: k = 0\nprint(m)\n"},{"id":"12","text":"Текстовый файл состоит не более чем из 106 символов A, B и C. Определите максимальную длину цепочки вида ABABAB... (составленной из фрагментов AB, последний фрагмент может быть неполным).\nДля выполнения этого задания следует написать программу. Ниже приведён файл, который необходимо обработать с помощью данного алгоритма.","answer":"24","description":"Для решения данной задачи будем посимвольно считывать текстовый файл. Объявим переменные: s  — строка для работы с символами из файла, maxCount  — максимальная длина последовательности, count  — временное хранение длины последовательности, i  — переменная для перебора всех символов. Алгоритм будет сравнивать значения на трех позициях, если символы будут удовлетворять нужным условиям, то значение счетчика будет увеличиваться на 1.","python":"f = open('24.txt').readline()\nk = m = 0\nfor i in range(len(f)):\n    if (f[i] == 'A' and k%2 == 0) or (f[i] == 'B' and k%2 == 1):\n        k += 1\n        m = max(m, k)\n    elif f[i] == 'A': k = 1\n    else: k = 0\nprint(m)\n"},{"id":"13","text":"Текстовый файл содержит строки различной длины. Общий объём файла не превышает 1 Мбайт. Строки содержат только заглавные буквы латинского алфавита (ABC…Z).\nВ строках, содержащих менее 25 букв A, нужно определить и вывести максимальное расстояние между одинаковыми буквами в одной строке.\nПример. Исходный файл:\nGIGA\nGABLAB\nNOTEBOOK\nAGAAA\nВ этом примере во всех строках меньше 25 букв A. Самое большое расстояние между одинаковыми буквами – в третьей строке между буквами O, расположенными в строке на 2-й и 7-й позициях. В ответе для данного примера нужно вывести число 5.\nДля выполнения этого задания следует написать программу. Ниже приведён файл, который необходимо обработать с помощью данного алгоритма.","answer":"1004","description":"Будем последовательно считывать строки из файла. В каждой считанной строке будем считать количество букв A и записывать это количество в счётчик count. Если количество букв A в строке будет меньше 25, будем считать расстояние между одинаковыми буквами в строке. Для этого для каждой буквы алфавита с помощью метода LastIndexOf() будем находить последнюю позицию буквы в строке, а с помощью метода IndexOf() будем находить первую позицию буквы в строке. Вычислив разность между последней и первой позициями, будем сравнивать полученный результат с переменной max. Если результат будет больше текущего значения переменной max, то будем присваивать переменной max значение вычисленной разности.","python":"with open(\"inf_26_04_21_24.txt\") as f:\n    p = f.readlines()\n    maxx = 0\n    a = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\"]\n    for j in p:\n        for i in a:\n            if j.rfind(i) - j.find(i) > maxx and j.count(\"A\") < 25:\n                maxx = j.rfind(i) - j.find(i)\n    print(maxx)\n"},{"id":"14","text":"Текстовый файл состоит не более чем из 106 символов A, B и C. Определите максимальное количество идущих подряд символов B.\nДля выполнения этого задания следует написать программу. Ниже приведён файл, который необходимо обработать с помощью данного алгоритма.","answer":"11","description":"Для решения данной задачи будем посимвольно считывать текстовый файл. Объявим переменные: maxLen  — максимальная длина последовательности, curLen  — временное хранение длины последовательности, i  — переменная для перебора всех символов, s  — строка для работы с символами из файла. Алгоритм будет сравнивать значение текущего символа со значением предыдущего, если символы будут удовлетворять нужным условиям, то значение счетчика будет увеличиваться на 1.","python":"f = open('24.txt').readline()\nk = 1\nm = 0\nfor i in range(len(f)-1):\n    if f[i] == 'B' and f[i+1] == 'B':\n        k += 1\n        m = max(m, k)\n    else: k = 1\nprint(m)\n"},{"id":"15","text":"Текстовый файл состоит не более чем из 106 символов X, Y и Z. Определите длину самой длинной последовательности, состоящей из символов Z. Хотя бы один символ Z находится в последовательности.\nДля выполнения этого задания следует написать программу. Ниже приведён файл, который необходимо обработать с помощью данного алгоритма.","answer":"7","description":"Для решения данной задачи будем посимвольно считывать текстовый файл. Объявим переменные: maxLen  — максимальная длина последовательности, curLen  — временное хранение длины последовательности, i  — переменная для перебора всех символов, s  — строка для работы с символами из файла. Алгоритм будет сравнивать значение текущего символа со значением предыдущего и, если символы не будут различаться и будут являться буквой Z, то значение счетчика будет увеличиваться на 1.","python":"f = open('24.txt').readline()\nk = 1\nm = 0\nfor i in range(len(f) - 1):\n    if f[i] == 'Z' and f[i + 1] == 'Z':\n        k += 1\n        m = max(m, k)\n    else: \n        k = 1\nprint(m)\n"},{"id":"16","text":"Текстовый файл состоит не более, чем из 107 строчных букв английского алфавита. Найдите максимальную длину подстроки, в которой символы «a» и «d» не стоят рядом.\nДля выполнения этого задания следует написать программу. Ниже приведён файл, который необходимо обработать с помощью данного алгоритма.","answer":"2252","description":"Заменяем все вхождения «da» и «ad» на строки «d a» и «a d». Таким образом, между любыми рядом стоящими «a» и «d» будет пробел. После этого разделяем строку по пробелам и находим максимальную длину получившихся подстрок.","python":"f = open('24.txt')\ns = f.readline()\\\n    .replace('ad', 'a d')\\\n    .replace('da', 'd a')\nw = list(map(len, s.split()))\nprint(max(w))\n"},{"id":"17","text":"Текстовый файл состоит не более чем из 106 символов A, B и C. Определите максимальное количество идущих подряд символов, среди которых каждые два соседних различны.\nДля выполнения этого задания следует написать программу. Ниже приведён файл, который необходимо обработать с помощью данного алгоритма.","answer":"42","description":"Для решения данной задачи будем посимвольно считывать текстовый файл. Объявим переменные: maxLen  — максимальная длина последовательности, curLen  — временное хранение длины последовательности, i  — переменная для перебора всех символов, s  — строка для работы с символами из файла. Алгоритм будет сравнивать значение текущего символа со значением предыдущего, если символы будут удовлетворять нужным условиям, то значение счетчика будет увеличиваться на 1.","python":"f = open('24.txt').readline()\nk = 1\nm = 0\nfor i in range(1, len(f)):\n    if f[i] != f[i-1]:\n        k += 1\n    else:\n        m = max(m, k)\n        k = 1\nm = max(m, k)\nprint(m)\n"},{"id":"18","text":"Текстовый файл содержит строки различной длины. Общий объём файла не превышает 1 Мбайт. Строки содержат только заглавные буквы латинского алфавита (ABC…Z). Определите количество строк, в которых буква A встречается чаще, чем буква E.\nДля выполнения этого задания следует написать программу. Ниже приведён файл, который необходимо обработать с помощью данного алгоритма.","answer":"485","description":"Для решения этой задачи будем построчно считывать файл. В каждой строке с помощью цикла будем считать количество символов A и E, проверяя, является ли данный символ строки символом A или E, и увеличивая счётчики cntA и cntE соответственно. Следовательно, если по окончании итерации значение cntE будет меньше значения cntA, переменную cntStr увеличиваем на 1.","python":"f=open('24.txt')\ns=f.readlines()\nk=0\nfor line in s:\n    if line.count('A') > line.count('E'):\n        k=k+1\nprint(k)\n"},{"id":"19","text":"Текстовый файл содержит только заглавные буквы латинского алфавита (ABC…Z). Определите максимальное количество идущих подряд символов, среди которых не более одной буквы D.\nДля выполнения этого задания следует написать программу. Ниже приведён файл, который необходимо обработать с помощью данного алгоритма.","answer":"354","description":"Будем посимвольно считывать файл. Каждую итерацию цикла while будем увеличивать счётчик k на единицу и использовать её как индекс. Если очередной считанный символ не является буквой D  — будем увеличивать счётчик count на единицу. Также будем проверять, больше ли текущее значение счётчика count значения переменной maxlen. Если условие выполняется  — будем обновлять значение переменной maxlen  — это искомое значение.\nЕсли будет встречена буква D, будем проверять, встречена ли она в первый раз. Если до этого букв D в текущей последовательности не встречалось, будем запоминать текущую позицию буквы D и продолжать увеличивать значение счётчика count. Если буква D в текущей последовательности встречается во второй раз, будем присваивать значению счётчика count разность текущей итерации цикла while и индекса первой встреченной буквы D  — таким образом будем учитывать и последовательность, начавшуюся от предыдущей встреченной буквы D. Также в этом случае обновим значение переменной i, отвечающей за хранение индекса последней встреченной буквы D.","python":"f = open('24.txt')\ns = f.readline()\n k = []\nmx = 0\nfor i in range(len(s)):\n    if s[i] == 'D':\n        k.append(i) \nfor j in range(len(k) - 2):\n    c = k[j + 2] - k[j] - 1\n    mx = max(mx ,c)\nprint(mx)\n"},{"id":"20","text":"Текстовый файл содержит только заглавные буквы латинского алфавита (ABC…Z). Определите символ, который чаще всего встречается в файле после двух одинаковых символов.\nНапример, в тексте CCCBBABAABCC есть комбинации CCC, CCB, BBA и AAB. Чаще всего  — 2 раза  — после двух одинаковых символов стоит B, в ответе для этого случая надо написать B.\nДля выполнения этого задания следует написать программу. Ниже приведён файл, который необходимо обработать с помощью данного алгоритма.","answer":"K","description":"Для решения этой задачи считаем строку из файла. Инициализируем строковую переменную s1 со значением «ABCDEFGHIJKLMNOPQRSTUVWXYZ». Посимвольно перебирая строку из файла, каждый раз проверяя, равен ли текущий символ следующему символу, и, если условие выполняется, будем вставлять в строку s1 символ, идущий между после двух одинаковых символов в считанной строке, таким образом, чтобы в строке s1 соответствующие символы стояли рядом друг с другом (например, если из файла была считана строка «AABAAB», строка s1 после выполнения алгоритма будет выглядеть так: «ABBBCDEFGHIJKLMNOPQRSTUVWXYZ». После этого посчитаем длину самой длинной цепочки символов и таким образом получим ответ.","python":"f = open(\"24.txt\") \ns = f.readline()\na = [0] * 26\nmaxi = 0\nfor i in range(len(s) - 1):\n    if s[i] == s[i + 1]:\n        a[ord(s[i + 2]) - 65] += 1\nfor i in range(26):\n    if a[i] > maxi:\n        maxi = a[i]\n        index = i\nprint(сhr(index + 65))"}]}